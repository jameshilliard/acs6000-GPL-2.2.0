int {
	len: 10
	ctype: int
	validation: and(isnumber($_))
	includes: <stdlib.h> <limits.h>
	toC: {
		char *end = NULL;
		long l = strtol(string_value, &end, 10);
		if (*end) /* Did we convert everything? */
			return 0;
		if ((l < INT_MIN) || (l > INT_MAX))
			return 0;
		*c_value = (int)l;
		return 1;
	}
	fromC-format: "%d"
}
long {
	len: 10
	ctype: long
	validation: and(isnumber($_))
	toC: {
		char *end = NULL;
		long l = strtol(string_value, &end, 10);
		if (*end) /* Did we convert everything? */
			return 0;
		*c_value = l;
		return 1;
	}
	fromC-format: "%ld"
}
short {
	len: 5
	ctype: short
	validation: and(isnumge($_, -32768), isnumlt($_, 32768))
	toC: {
		char *end = NULL;
		long l = strtol(string_value, &end, 10);
		if (*end) /* Did we convert everything? */
			return 0;
		if ((l < SHRT_MIN) || (l > SHRT_MAX))
			return 0;
		*c_value = (short)l;
		return 1;
	}
	fromC-format: "%d"
}
unsignedShort {
	len: 5
	ctype: unsigned short
	validation: and(isnumge($_, 0), isnumlt($_, 65536))
	toC: {
		char *end = NULL;
		unsigned long int l = strtoul(string_value, &end, 10);
		if (*end) /* Did we convert everything? */
			return 0;
		if (l > USHRT_MAX)
			return 0;
		*c_value = (unsigned short)l;
		return 1;
	}
	fromC-format: "%ud"
}
double {
	len: 20
	ctype: double
	validation: regmatch('^([0-9]+(\.[0-9]*)?|[0-9]*\.[0-9]+)([Ee][-+]?[0-9]{1,4})?$', $_)
	toC: {
		char *end = NULL;
		double d = strtod(string_value, &end);
		if (*end) /* Did we convert everything? */
			return 0;
		*c_value = d;
		return 1;
	}
	fromC-format: "%g"
}
UTF8String {
	len: 4000
	ctype: char *
	implementation-includes: <string.h>
	toC: {
		if(!string_value)
			return 0;
		*c_value = strdup(string_value);
		return 1;
	}
	toC-free: {
		free(c_value);
	}
	fromC: {
		return strdup(c_value);
	}
}
boolean {
	ctype: int
	validation: isnumber(index(tolower($_), 'on', 'off', 'yes', 'no', '1', '0', 'true', 'false'))
	choices: list('yes', 'no')
	implementation-includes: <strings.h>
	toC: {
		if (!strcasecmp(string_value, "on") ||
			!strcasecmp(string_value, "yes") ||
			!strcmp(string_value, "1") ||
			!strcmp(string_value, "enabled") ||
			!strcasecmp(string_value, "true")) {
			*c_value = 1;
			return 1;}
		if (!strcasecmp(string_value, "off") ||
			!strcasecmp(string_value, "no") ||
			!strcmp(string_value, "0") ||
			!strcmp(string_value, "disabled") ||
			!strcasecmp(string_value, "false")) {
			*c_value = 0;
			return 1;}
		return 0;
	}
	fromC: {
		return strdup(c_value ? "yes" : "no");
	}
	flags: case-insensitive
}
tcpPort {
	parent-type: unsignedShort
	validation: and(istype($_, 'unsignedShort'), isnumge($_, 1))
}
hostname {
	parent-type: UTF8String
	len: 64
	validation: ishostname($_)
}
ipv4Address {
	ctype: struct in_addr *
	includes: <sys/socket.h> <netinet/in.h> <arpa/inet.h>
	len: 15
	validation: isip($_)
	toC: {
		struct in_addr *retval = malloc(sizeof(struct in_addr));
		if (0 == inet_aton(string_value, retval)) {
			free(retval);
			return 0;}
		*c_value = retval;
		return 1;
	}
	toC-free: {
		free(c_value);
	}
	fromC: {
		return strdup(inet_ntoa(*c_value));
	}
}
ipv6Address {
	ctype: struct in6_addr *
	includes: <sys/socket.h> <netinet/in.h> <arpa/inet.h>
	len: 39
	validation: isip6($_)
	toC: {
		struct in6_addr *retval = malloc(sizeof(struct in6_addr));
		if (inet_pton(AF_INET6, string_value, retval) <= 0) {
			free(retval);
			return 0;}
		*c_value = retval;
		return 1;
	}
	toC-free: {
		free(c_value);
	}
	fromC: {
		char buf[INET6_ADDRSTRLEN];
		if (!inet_ntop(AF_INET6, c_value, buf, sizeof(buf)))
			return NULL;
		return strdup(buf);
	}
}
ipAddress {
	ctype: struct ip_addr *
	validation: or(equal('', $_), isip($_), isip6($_))
	include: <parameter-ctypes.h>
	toC: {
		struct ip_addr *retval = malloc(sizeof(struct ip_addr));
		if (string_value && !*string_value){
			retval->family = AF_UNSPEC;
			*c_value = retval;
			return 1;
		/**/}

		if (0 != inet_aton(string_value, &retval->ip.ip4)) {
			retval->family = AF_INET;
			*c_value = retval;
			return 1;
		/**/}

		if (inet_pton(AF_INET6, string_value, &retval->ip.ip6) > 0) {
			retval->family = AF_INET6;
			*c_value = retval;
			return 1;
		/**/}

		free(retval);
		return 0;
	}
	toC-free: {
		free(c_value);
	}
	fromC: {
		switch (c_value->family) {
		case AF_INET:
			{
				char buf[INET_ADDRSTRLEN];
				if (!inet_ntop(AF_INET, &c_value->ip.ip4, buf, sizeof(buf)))
					return NULL;
				return strdup(buf);
			/**/}
		case AF_INET6:
			{
				char buf[INET6_ADDRSTRLEN];
				if (!inet_ntop(AF_INET6, &c_value->ip.ip6, buf, sizeof(buf)))
					return NULL;
				return strdup(buf);
			/**/}
		case AF_UNSPEC:
			return strdup("");
		/**/}
		return NULL;
	}
}
interface4Config {
	define: enum interface4Config
	enum {
		static {
			cValue: INTERFACE_CONFIG_STATIC
		}
		dhcp {
			cValue: INTERFACE_CONFIG_DHCP
		}
		manual {
			cValue: INTERFACE_CONFIG_MANUAL
		}
	}
}
interface6Config {
	define: enum interface6Config
	enum {
		static {
			cValue: INTERFACE_CONFIG_STATIC6
		}
		dhcpv6 {
			cValue: INTERFACE_CONFIG_DHCPV6
		}
		manual {
			cValue: INTERFACE_CONFIG_MANUAL6
		}
		stateless {
			cValue: INTERFACE_CONFIG_STATELESS
		}
	}
}
dataBufType {
	define: enum dataBufType
	enum {
		local {
			cValue: LOCAL
		}
		nfs {
			cValue: NFS
		}
		syslog {
			cValue: SYSLOG
		}
		dsview {
			cValue: DSVIEW
		}
	}
}
