Index: grub-0.96/grub/main.c
===================================================================
--- grub-0.96.orig/grub/main.c
+++ grub-0.96/grub/main.c
@@ -36,6 +36,7 @@ int grub_stage2 (void);
 char *program_name = 0;
 int use_config_file = 1;
 int use_preset_menu = 0;
+int use_serial = 1;
 #ifdef HAVE_LIBCURSES
 int use_curses = 1;
 #else
@@ -211,6 +212,7 @@ main (int argc, char **argv)
 	  use_config_file = 0;
 	  use_curses = 0;
 	  use_pager = 0;
+	  use_serial = 0;
 	  break;
 
 	case OPT_READ_ONLY:
Index: grub-0.96/stage2/boot.c
===================================================================
--- grub-0.96.orig/stage2/boot.c
+++ grub-0.96/stage2/boot.c
@@ -280,9 +280,6 @@ load_image (char *kernel, char *arg, ker
 	errnum = ERR_WONT_FIT;
       else
 	{
-	  grub_printf ("   [Linux-%s, setup=0x%x, size=0x%x]\n",
-		       (big_linux ? "bzImage" : "zImage"), data_len, text_len);
-
 	  /* Video mode selection support. What a mess!  */
 	  /* NOTE: Even the word "mess" is not still enough to
 	     represent how wrong and bad the Linux video support is,
@@ -836,8 +833,6 @@ load_initrd (char *initrd)
   moveto -= 0x10000;
   memmove ((void *) RAW_ADDR (moveto), (void *) cur_addr, len);
 
-  printf ("   [Linux-initrd @ 0x%x, 0x%x bytes]\n", moveto, len);
-
   /* FIXME: Should check if the kernel supports INITRD.  */
   lh->ramdisk_image = RAW_ADDR (moveto);
   lh->ramdisk_size = len;
Index: grub-0.96/stage2/builtins.c
===================================================================
--- grub-0.96.orig/stage2/builtins.c
+++ grub-0.96/stage2/builtins.c
@@ -82,6 +82,12 @@ static unsigned short bios_drive_map[DRI
    inside other functions.  */
 static int configfile_func (char *arg, int flags);
 
+void init_serial()
+{
+  serial_func("--device=/dev/ttyS0",0);
+  terminal_func("serial",0);  
+}
+
 /* Initialize the data for builtins.  */
 void
 init_builtins (void)
@@ -779,8 +785,8 @@ static struct builtin builtin_default =
 {
   "default",
   default_func,
-  BUILTIN_MENU,
-#if 0
+  BUILTIN_MENU | BUILTIN_CMDLINE | BUILTIN_HELP_LIST,
+#if 1
   "default [NUM | `saved']",
   "Set the default entry to entry number NUM (if not specified, it is"
   " 0, the first entry) or the entry number saved by savedefault."
@@ -1456,6 +1462,7 @@ static struct builtin builtin_halt =
 static int
 help_func (char *arg, int flags)
 {
+  return 0;
   int all = 0;
   
   if (grub_memcmp (arg, "--all", sizeof ("--all") - 1) == 0)
@@ -3155,8 +3162,6 @@ real_root_func (char *arg, int attempt_m
       if (errnum)
 	return 1;
       
-      /* Print the type of the filesystem.  */
-      print_fsys_type ();
     }
   
   return 0;
@@ -4779,7 +4784,99 @@ static struct builtin builtin_vbeprobe =
   " the information about only the mode."
 };
   
-
+/* copy image file to device */
+int
+cpimage_func (char *arg, int flags)
+{
+  char *to_drive = NULL;
+  char *from_image = NULL;
+  unsigned long from;
+  char *buf = (char *) RAW_ADDR (0x104000);
+  int sect_num = 0, nlen;
+  int nSize;
+  int dest_drive, dest_partition, dest_sector;
+ 
+  to_drive = arg;
+  from_image = skip_to (0, arg);
+
+  /* Are correct the args? */
+  if(to_drive == NULL || from_image == NULL)
+  {
+    errnum = ERR_BAD_ARGUMENT;
+    goto cpimage_func_failed;
+  }
+
+  if (! set_device (to_drive) || ! open_partition ())
+    goto cpimage_func_failed;
+
+  /* Store the information for the destination device.  */
+  dest_drive = current_drive;
+  dest_partition = current_partition;
+  dest_sector = part_start;
+  
+  if(!grub_open(from_image))
+  {
+    grub_printf("File cann't be opened\n"); 
+    return errnum;
+  }
+  grub_close();
+  nSize = filemax / SECTOR_SIZE;
+  // copy image file to the device.
+  grub_printf("copying file %s \n", to_drive);  
+   
+  while(1)
+  {
+    if(!grub_open(from_image))
+      goto cpimage_func_failed;
+    
+    /* seek the image file to the correct offset and read image file */
+    grub_seek(sect_num * SECTOR_SIZE);
+    nlen = grub_read(buf, SECTOR_SIZE);
+    
+    /* close image file */
+    grub_close();
+
+    /* Is it correct to read? */
+    if(nlen > 0)
+    {
+      current_drive = dest_drive;
+      current_partition = dest_partition;
+      if (! open_partition ())
+        goto cpimage_func_failed;
+      if (!devwrite(sect_num, 1, buf))
+        goto cpimage_func_failed;
+
+      if((sect_num % 1024) == 0)
+      {
+        grub_printf("Copied %d/%d\n", sect_num, nSize);
+      }
+      sect_num ++;
+    }
+    
+    /* Is it the end of the image file ? */
+    if(nlen < SECTOR_SIZE)
+    {
+      /* If It is the end of the iamge file, finish */
+      break;
+    }
+  }
+  grub_printf("Successed!\n");
+  
+cpimage_func_failed:
+  if(errnum)
+    grub_printf("Copy error.\n ");
+  return errnum;
+}
+
+static struct builtin builtin_cpimage =
+{
+  "cpimage",
+  cpimage_func,
+  BUILTIN_CMDLINE | BUILTIN_HELP_LIST,
+  "cpimage device imagefile",
+  "Copy an image file to device." 
+};
+
 /* The table of builtin commands. Sorted in dictionary order.  */
 struct builtin *builtin_table[] =
 {
@@ -4793,6 +4890,7 @@ struct builtin *builtin_table[] =
   &builtin_cmp,
   &builtin_color,
   &builtin_configfile,
+  &builtin_cpimage,
   &builtin_debug,
   &builtin_default,
 #ifdef GRUB_UTIL
Index: grub-0.96/stage2/char_io.c
===================================================================
--- grub-0.96.orig/stage2/char_io.c
+++ grub-0.96/stage2/char_io.c
@@ -237,9 +237,6 @@ void
 init_page (void)
 {
   cls ();
-
-  grub_printf ("\n    GNU GRUB  version %s  (%dK lower / %dK upper memory)\n\n",
-	  version_string, mbi.mem_lower, mbi.mem_upper);
 }
 
 /* The number of the history entries.  */
@@ -716,6 +713,7 @@ real_get_cmdline (char *prompt, char *cm
 		lpos = llen;
 		cl_refresh (1, 0);
 	      }
+	    default:
 	      break;
 	    }
 	}
Index: grub-0.96/stage2/cmdline.c
===================================================================
--- grub-0.96.orig/stage2/cmdline.c
+++ grub-0.96/stage2/cmdline.c
@@ -124,6 +124,7 @@ enter_cmdline (char *heap, int forever)
   init_cmdline ();
   grub_setjmp (restart_cmdline_env);
   init_page ();
+	setcursor(0);
 #ifdef SUPPORT_DISKLESS
   print_network_configuration ();
   grub_putchar ('\n');
@@ -203,9 +204,9 @@ run_script (char *script, char *heap)
 	     intervention.  */
 	  if (fallback_entryno < 0)
 	    {
-	      grub_printf ("\nPress any key to continue...");
+/*	      grub_printf ("\nPress any key to continue...");
 	      (void) getkey ();
-	    }
+*/	    }
 	  
 	  return 1;
 	}
@@ -232,13 +233,9 @@ run_script (char *script, char *heap)
       builtin = find_command (heap);
       if (! builtin)
 	{
-	  grub_printf ("%s\n", old_entry);
 	  continue;
 	}
 
-      if (! (builtin->flags & BUILTIN_NO_ECHO))
-	grub_printf ("%s\n", old_entry);
-
       /* If BUILTIN cannot be run in the command-line, skip it.  */
       if (! (builtin->flags & BUILTIN_CMDLINE))
 	{
Index: grub-0.96/stage2/shared.h
===================================================================
--- grub-0.96.orig/stage2/shared.h
+++ grub-0.96/stage2/shared.h
@@ -566,6 +566,8 @@ extern char *linux_data_real_addr;
 /* If not using config file, this variable is set to zero,
    otherwise non-zero.  */
 extern int use_config_file;
+
+extern int use_serial;
 /* If using the preset menu, this variable is set to non-zero,
    otherwise zero.  */
 extern int use_preset_menu;
Index: grub-0.96/stage2/stage2.c
===================================================================
--- grub-0.96.orig/stage2/stage2.c
+++ grub-0.96/stage2/stage2.c
@@ -17,6 +17,7 @@
  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  */
 
+
 #include <shared.h>
 #include <term.h>
 
@@ -827,6 +828,274 @@ get_line_from_config (char *cmdline, int
   return pos;
 }
 
+/************************************************************************************
+
+************************************************************************************/
+
+struct menuItem
+{
+  char *menuName;
+  int (*func) (char *Args);
+};
+
+static int BootFunc(char* Args)
+{
+  return 0;
+}
+
+static int FWManage(char* Args)
+{
+  return 0;
+}
+
+static int RestoreFD(char* pArgs)
+{
+  return 0;
+}
+
+int cpimage_func (char *arg, int flags);
+static int RescueGrub(char* pArgs)
+{
+  char szDefault[] = "(hd0,0) (hd0,8)/rescue.img";
+
+  cls();
+  if(cpimage_func(szDefault, 0) == 0)
+    return 1;
+  grub_reboot ();
+  return 0;
+}
+
+static int EnterCmd(char* Args)
+{
+  enter_cmdline((char *) mbi.drives_addr + mbi.drives_length,0);
+  return 0;
+}
+
+struct menuItem menuTable[] =
+{
+  {
+    "0 -- Boot the Appliance",
+    BootFunc
+  },
+/*  {
+    "1 -- Firmware Management",
+    FWManage
+  },
+*/
+  {
+    "1 -- Restore to Factory Install",
+    RestoreFD
+/*},
+  {
+    "2 -- Recursive partition",
+    RescueGrub
+  },
+  {
+    "2 -- Command Line",
+    EnterCmd
+*/}
+};
+
+void run_Newmenu(char *menu_entries, char *config_entries, int num_entries, char *heap, int entryno)
+{
+  int c, time1, time2 = -1, first_entry = 0;
+  char *cur_entry = 0;
+  
+  int nSelected = 0;
+  int nMenuShowed = 0;
+
+  /*
+   *  Main loop for menu UI.
+   */
+//  grub_timeout = 10;
+restart:
+/*
+  if (show_menu)
+  {
+    int nIndex;
+    init_page ();
+    setcursor (0);
+
+    gotoxy (3, 2);
+    grub_printf ("\nSelect the number and enter keys to select.\n");
+    for(nIndex = 0; nIndex < sizeof(menuTable) / sizeof(struct menuItem); nIndex ++)
+    {
+      print_entry (5+nIndex, 0,menuTable[nIndex].menuName);
+    }
+  }
+  else
+    return ;
+*/
+  show_menu = 0;
+  /* XX using RT clock now, need to initialize value */
+  while ((time1 = getrtsecs()) == 0xFF);
+
+  init_page ();
+  setcursor (0);
+  grub_printf("\nPress Ctrl-Z to show the boot menu.\n");
+  while (1)
+  {
+    /* Initialize to NULL just in case...  */
+    cur_entry = NULL;
+
+    if(show_menu && (!nMenuShowed))
+    {
+      int nIndex;
+      init_page ();
+      setcursor (0);
+  
+      gotoxy (3, 2);
+      grub_printf ("\nType the number of the entry, and then press Enter.\n");
+      for(nIndex = 0; nIndex < sizeof(menuTable) / sizeof(struct menuItem); nIndex ++)
+      {
+        print_entry (5+nIndex, 0,menuTable[nIndex].menuName);
+      }
+      nMenuShowed = 1;
+    }
+    if (grub_timeout >= 0 && (time1 = getrtsecs()) != time2 && time1 != 0xFF)
+    {
+      if (grub_timeout <= 0)
+      {
+        grub_timeout = -1;
+        break;
+      }
+    
+      /* else not booting yet! */
+      time2 = time1;
+    
+      if(show_menu)
+      {
+        gotoxy (3, 22);
+        grub_printf ("The selected [%d] entry will be run automatically in %d seconds.    ", nSelected, grub_timeout);
+      }
+      
+      grub_timeout--;
+    }
+
+    /* Check for a keypress, however if TIMEOUT has been expired
+     (GRUB_TIMEOUT == -1) relax in GETKEY even if no key has been
+     pressed.  
+     This avoids polling (relevant in the grub-shell and later on
+     in grub if interrupt driven I/O is done).  */
+     
+    if (checkkey () >= 0 || grub_timeout < 0)
+    {
+      /* Key was pressed, show which entry is selected before GETKEY,
+         since we're comming in here also on GRUB_TIMEOUT == -1 and
+         hang in GETKEY */
+    
+      if(grub_timeout < 0 && (!show_menu))
+      {
+        /*break the loop*/
+        break;
+      }
+      c = ASCII_CHAR (getkey ());
+    
+      if (grub_timeout >= 0)
+      {
+	      if(show_menu)
+        {
+          gotoxy (3, 22);
+          printf ("                                                                    ");
+        }
+        grub_timeout = -1;
+        fallback_entryno = -1;
+      }
+    
+      if(c == 21) /* ^U */
+      {
+        EnterCmd(NULL);
+      }
+      else if(c == 26) /* ^Z */
+      {
+        show_menu = 1;
+      }
+      if(c == '\r' || c == '\n')
+        break;
+      if(show_menu && (c >= '0' && c <= '9')) /* input the select number */
+      {
+        if(c - '0' < sizeof(menuTable) / sizeof(struct menuItem))
+        {
+          nSelected = c - '0';
+          gotoxy (3, 22);
+          grub_printf ("You selected entry [%d], press Enter key to run the entry.  ", nSelected);
+        }
+        else 
+          continue;
+      }
+    }    
+  }
+  if(nSelected < 2)
+  {
+    cls ();
+    setcursor (1);
+    
+    if(nSelected == 1)
+    {
+      char yn;
+      grub_printf("Are you sure to restore to factory install? \nPress 'y' to confirm or 'n' to cancel\n");
+waitkey:      
+      while (checkkey () < 0);
+      yn = getkey ();
+      switch(yn)
+      {
+      case 'y':
+        grub_printf("Start loading, please wait...\n");
+        entryno = 2;
+        break;
+      case 'n':
+        grub_longjmp (restart_env, 0);
+        break;
+      default:
+        goto waitkey;
+        break;
+      }
+    }
+    
+    while (1)
+    {
+      if (! cur_entry)
+        cur_entry = get_entry (config_entries, first_entry + entryno, 1);
+  
+      /* Set CURRENT_ENTRYNO for the command "savedefault".  */
+      current_entryno = first_entry + entryno;
+      
+      if (run_script (cur_entry, heap))
+      {
+        if (fallback_entryno >= 0)
+        {
+          cur_entry = NULL;
+          first_entry = 0;
+          entryno = fallback_entries[fallback_entryno];
+          fallback_entryno++;
+          if (fallback_entryno >= MAX_FALLBACK_ENTRIES || fallback_entries[fallback_entryno] < 0)
+    	      fallback_entryno = -1;
+        }
+        else
+          break;
+      }
+      else
+        break;
+    }
+
+  }
+  else
+  {
+    if (! cur_entry)
+      cur_entry = get_entry (config_entries, first_entry + entryno, 1);
+
+    /* Set CURRENT_ENTRYNO for the command "savedefault".  */
+    current_entryno = first_entry + entryno;
+        
+    menuTable[nSelected].func(config_entries);
+  }
+  grub_longjmp (restart_env, 0);
+}
+
+/***********************************************************************************
+
+************************************************************************************/
+
 
 /* This is the starting function in C.  */
 void
@@ -1048,18 +1317,26 @@ cmain (void)
 	    }
 	  while (is_preset);
 	}
-
+      /* initial the srial, and set terminal to serial */
+#ifndef GRUB_UTIL
+    init_serial();
+#endif
       if (! num_entries)
 	{
 	  /* If no acceptable config file, goto command-line, starting
 	     heap from where the config entries would have been stored
 	     if there were any.  */
-	  enter_cmdline (config_entries, 1);
+#ifdef GRUB_UTIL
+  	enter_cmdline (config_entries, 1);
+#else
+    grub_printf("\nThe %s file cannot be found. Appliance is rebooting now. \n", config_file);
+    grub_reboot();
+#endif
 	}
       else
 	{
 	  /* Run menu interface.  */
-	  run_menu (menu_entries, config_entries, num_entries,
+	  run_Newmenu(menu_entries, config_entries, num_entries,
 		    menu_entries + menu_len, default_entry);
 	}
     }
Index: grub-0.96/stage2/serial.c
===================================================================
--- grub-0.96.orig/stage2/serial.c
+++ grub-0.96/stage2/serial.c
@@ -423,6 +423,7 @@ serial_cls (void)
 void
 serial_setcolorstate (color_state state)
 {
+  return ;
   keep_track = 0;
   if (state == COLOR_STATE_HIGHLIGHT)
     ti_enter_standout_mode ();
