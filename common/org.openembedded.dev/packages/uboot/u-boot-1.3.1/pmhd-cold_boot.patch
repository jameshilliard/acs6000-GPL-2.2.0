Index: u-boot-1.3.1/common/Makefile
===================================================================
--- u-boot-1.3.1.orig/common/Makefile
+++ u-boot-1.3.1/common/Makefile
@@ -133,6 +133,7 @@ COBJS-y += xyzModem.o
 COBJS-y += cmd_mac.o
 COBJS-$(CONFIG_CMD_MFSL) += cmd_mfsl.o
 COBJS-$(CONFIG_AVOCENT_GSP) += cmd_gsp-bootcmd.o
+COBJS-y += cold_boot_cfg.o
 
 COBJS	:= $(COBJS-y)
 SRCS	:= $(AOBJS:.o=.S) $(COBJS:.o=.c)
Index: u-boot-1.3.1/common/cold_boot_cfg.c
===================================================================
--- /dev/null
+++ u-boot-1.3.1/common/cold_boot_cfg.c
@@ -0,0 +1,385 @@
+/*
+ * (C) Copyright 2001
+ * Gerald Van Baren, Custom IDEAS, vanbaren@cideas.com.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+ * I2C Functions similar to the standard memory functions.
+ *
+ * There are several parameters in many of the commands that bear further
+ * explanations:
+ *
+ * Two of the commands (imm and imw) take a byte/word/long modifier
+ * (e.g. imm.w specifies the word-length modifier).  This was done to
+ * allow manipulating word-length registers.  It was not done on any other
+ * commands because it was not deemed useful.
+ *
+ * {i2c_chip} is the I2C chip address (the first byte sent on the bus).
+ *   Each I2C chip on the bus has a unique address.  On the I2C data bus,
+ *   the address is the upper seven bits and the LSB is the "read/write"
+ *   bit.  Note that the {i2c_chip} address specified on the command
+ *   line is not shifted up: e.g. a typical EEPROM memory chip may have
+ *   an I2C address of 0x50, but the data put on the bus will be 0xA0
+ *   for write and 0xA1 for read.  This "non shifted" address notation
+ *   matches at least half of the data sheets :-/.
+ *
+ * {addr} is the address (or offset) within the chip.  Small memory
+ *   chips have 8 bit addresses.  Large memory chips have 16 bit
+ *   addresses.  Other memory chips have 9, 10, or 11 bit addresses.
+ *   Many non-memory chips have multiple registers and {addr} is used
+ *   as the register index.  Some non-memory chips have only one register
+ *   and therefore don't need any {addr} parameter.
+ *
+ *   The default {addr} parameter is one byte (.1) which works well for
+ *   memories and registers with 8 bits of address space.
+ *
+ *   You can specify the length of the {addr} field with the optional .0,
+ *   .1, or .2 modifier (similar to the .b, .w, .l modifier).  If you are
+ *   manipulating a single register device which doesn't use an address
+ *   field, use "0.0" for the address and the ".0" length field will
+ *   suppress the address in the I2C data stream.  This also works for
+ *   successive reads using the I2C auto-incrementing memory pointer.
+ *
+ *   If you are manipulating a large memory with 2-byte addresses, use
+ *   the .2 address modifier, e.g. 210.2 addresses location 528 (decimal).
+ *
+ *   Then there are the unfortunate memory chips that spill the most
+ *   significant 1, 2, or 3 bits of address into the chip address byte.
+ *   This effectively makes one chip (logically) look like 2, 4, or
+ *   8 chips.  This is handled (awkwardly) by #defining
+ *   CFG_I2C_EEPROM_ADDR_OVERFLOW and using the .1 modifier on the
+ *   {addr} field (since .1 is the default, it doesn't actually have to
+ *   be specified).  Examples: given a memory chip at I2C chip address
+ *   0x50, the following would happen...
+ *     imd 50 0 10      display 16 bytes starting at 0x000
+ *                      On the bus: <S> A0 00 <E> <S> A1 <rd> ... <rd>
+ *     imd 50 100 10    display 16 bytes starting at 0x100
+ *                      On the bus: <S> A2 00 <E> <S> A3 <rd> ... <rd>
+ *     imd 50 210 10    display 16 bytes starting at 0x210
+ *                      On the bus: <S> A4 10 <E> <S> A5 <rd> ... <rd>
+ *   This is awfully ugly.  It would be nice if someone would think up
+ *   a better way of handling this.
+ *
+ * Adapted from cmd_mem.c which is copyright Wolfgang Denk (wd@denx.de).
+ */
+
+#include <common.h>
+#include <command.h>
+#include <i2c.h>
+#include <asm/byteorder.h>
+#include <common.h>
+#include <configs/cold_boot_cfg.h>
+
+//FPGA REGISTER
+#define PMHD_FPGA_REGISTER_WRITE        0x40
+#define PMHD_FPGA_SYS_INFO              0
+#define PMHD_FPGA_SYS_ID                1
+#define PMHD_FPGA_INT_STATUS            2
+#define PMHD_FPGA_INT_OUTLET_STATUS1    3
+#define PMHD_FPGA_INT_OUTLET_STATUS2    4
+#define PMHD_FPGA_MISC_CONTROL          5
+#define PMHD_FPGA_RELAY_CONTROL1        6
+#define PMHD_FPGA_RELAY_CONTROL2        7
+#define PMHD_FPGA_LED_CONTROL1          8
+#define PMHD_FPGA_LED_CONTROL2          9
+#define PMHD_FPGA_LED_CONTROL3          10
+#define PMHD_FPGA_LED_CONTROL4          11
+#define PMHD_FPGA_MUX_CONTROL1          12
+#define PMHD_FPGA_MUX_CONTROL2          13
+#define PMHD_FPGA_HARDWIRED_OPTIONS     14
+#define PMHD_FPGA_VERSION               15
+
+#define CS5463_REGISTER_CONFIG          0
+#define CS5463_REGISTER_MODE            18
+
+#define DISP_LINE_LEN			16
+#define MAX_OUTLET_CARD 		3
+
+extern unsigned int spi_8313_read(int spi_reg,int type,int cs);
+extern unsigned int spi_8313_write(int spi_reg,unsigned char reg_val, int cs );
+extern void spi_8313_init(void);
+extern void spi_8313_deinit(void);
+extern void blink_display_max6950(int num_blink);
+
+int read_i2c_rtc_nvram (unsigned char *mem_ptr, int num_of_bytes)
+{
+	u_char	chip;
+	uint	addr, alen, length;
+	int	j, nbytes, linebytes;
+	int ctr = 0;
+	/* We use the last specified parameters, unless new ones are
+	 * entered.
+	 */
+	chip   = 0x68; 
+	addr   = 8;
+	alen   = 1; 
+	length = num_of_bytes; 
+	/*
+	 * Print the lines.
+	 *
+	 * We buffer all read data, so we can make sure data is read only
+	 * once.
+	 */
+	nbytes = length;
+	do {
+		unsigned char	linebuf[DISP_LINE_LEN];
+		unsigned char	*cp;
+
+		linebytes = (nbytes > DISP_LINE_LEN) ? DISP_LINE_LEN : nbytes;
+
+		if (i2c_read(chip, addr, alen, linebuf, linebytes) == 0) {
+			cp = linebuf;
+			for (j=0; j<linebytes; j++) {
+				mem_ptr[ctr++] =  *cp++; 
+				addr++;
+			}
+		}
+		nbytes -= linebytes;
+	} while (nbytes > 0);
+	return 0;
+}
+
+     
+void chk_hw_boot_update_outlet_sts(void)
+{
+
+        unsigned int val;
+        int ctr =0;
+        int cs = 0;
+        int mycs = 0;
+        unsigned int delay_time = 0;
+        unsigned char num_outlet_cards = 0;
+        unsigned short crc_computed;
+        unsigned char mem_ptr[56];
+        unsigned char num_outlet = 0;
+        unsigned short outlet_relay_status = 0;
+        unsigned char cold_boot_flag;
+        unsigned short crc_stored;
+        unsigned short outlet_sts[MAX_OUTLET_CARD];
+        int board_num = 0;
+	unsigned char basic_model_flag = 0;
+        unsigned char metered_only = 0;
+
+        blink_display_max6950(1);
+
+        read_i2c_rtc_nvram(mem_ptr,56);
+        crc_computed =  crc_ccitt(mem_ptr,54) ;
+        cold_boot_cfg_t *uboot_struct  = (cold_boot_cfg_t *) mem_ptr;
+
+        crc_stored = (unsigned short)uboot_struct->crc;
+        
+	spi_8313_init();
+
+	// detect the board type
+	val = spi_8313_read(PMHD_FPGA_SYS_ID,16,1);
+        printf("sysID %x",val);
+
+	switch(val)
+	{
+		case 0x00://NAZCA
+			val = spi_8313_read(PMHD_FPGA_HARDWIRED_OPTIONS,16,1);
+                        val = val & 0x01;
+                        if(val == 0 ) {
+                                num_outlet = 3; // No of outlets per FPGA
+                        }
+                        else {
+                                num_outlet = 6; // No of outlets per FPGA
+                        }
+                        num_outlet_cards = 1;
+                        break;
+                case 0x01://STONEHENGE
+                        num_outlet = 8; // No of outlets per FPGA
+                        num_outlet_cards = 3;
+                        break;
+                case 0x02://PM10-NG
+                        num_outlet = 10; // No of outlets per FPGA
+                        num_outlet_cards = 1;
+                        break;
+                case 0x03://PM20-NG
+                        num_outlet = 10; // No of outlets per FPGA
+                        num_outlet_cards = 2;
+                        break;
+                case 0x04: //STONEHENGE BASIC
+                        num_outlet_cards = 1;
+                        num_outlet = 6; // No of outlets per FPGA
+                        basic_model_flag = 1;
+                case 0x05://PM10-NG BASIC
+                        num_outlet_cards = 1;
+                        num_outlet = 2; // No of outlets per FPGA
+                        basic_model_flag = 1;
+                case 0x06://PM20-NG BASIC
+                        num_outlet_cards = 1;
+                        num_outlet = 4; // No of outlets per FPGA
+                        basic_model_flag = 1;
+                        break;
+                default:
+                        printf("\nBoard Not Supported");
+                        break;
+	}
+
+        val = spi_8313_read(PMHD_FPGA_SYS_INFO,16,1);
+        if((val& 0x01) == 0 ) {
+                metered_only = 1;
+        }
+        printf(" sysInfo %x\n",val);
+	
+	if( crc_computed != crc_stored)
+        {
+                printf("Crc Mismatch in NVRAM\n");
+
+		if((basic_model_flag)||(metered_only)) { // If the appliance is basic type ,turn on all the outlets
+		
+                        for( mycs = 1; mycs < num_outlet_cards * 2 ; mycs = mycs + 2)
+                        {
+				cs = (num_outlet_cards*2) - mycs;
+                                //Read Interrupt staus reg ,prevent FPGA timed out
+                                val = spi_8313_read(PMHD_FPGA_INT_STATUS,16,cs); // uncomment later
+                                // LED follow the relay state
+                                spi_8313_write(PMHD_FPGA_LED_CONTROL4,0xFF,cs);
+                                spi_8313_write(PMHD_FPGA_LED_CONTROL3,0xFF,cs);
+                                spi_8313_write(PMHD_FPGA_LED_CONTROL2,0xFF,cs);
+                                spi_8313_write(PMHD_FPGA_LED_CONTROL1,0xFF,cs);
+
+				spi_8313_write(PMHD_FPGA_RELAY_CONTROL2,0xff,cs);
+				val = spi_8313_read(PMHD_FPGA_RELAY_CONTROL2,16,cs);
+				spi_8313_write(PMHD_FPGA_RELAY_CONTROL1,0xff ,cs);
+				val = spi_8313_read(PMHD_FPGA_RELAY_CONTROL1,16,cs);
+                        }
+		}
+        }
+        else
+        {
+
+                for( cs = 1; cs < num_outlet_cards * 2 ; cs = cs + 2)
+                {
+                        //Read Interrupt staus reg ,prevent FPGA timed out
+                        val = spi_8313_read(PMHD_FPGA_INT_STATUS,16,cs); // uncomment later
+                }
+
+                cold_boot_flag = 0;
+                board_num = 0;
+                for( mycs = 1; mycs < num_outlet_cards * 2 ; mycs = mycs + 2)
+                {
+			cs = (num_outlet_cards*2) - mycs;
+                        val = spi_8313_read(PMHD_FPGA_RELAY_CONTROL2,16,cs);
+                        outlet_sts[board_num] = val & 0xFF;
+                        val = spi_8313_read(PMHD_FPGA_RELAY_CONTROL1,16,cs);
+                        outlet_sts[board_num] |= (val & 0xFF) << 8;
+			if((basic_model_flag)||(metered_only)) {
+				if(( outlet_sts[board_num] & num_outlet) == 0 ) {
+                                	cold_boot_flag++;
+				}
+			}
+			else {
+                        	outlet_relay_status = 0x0000;
+                        	for( ctr = 0; ctr < num_outlet; ctr++ )
+                        	{
+                                	delay_time = (unsigned short)uboot_struct->post_on_delay[ctr + board_num*num_outlet];
+
+                                	if( delay_time != 0xFFFF ) //If outlet ON
+                                	{
+                                        	if( num_outlet == 3 ){
+                                                	outlet_relay_status |= (1 << (2*ctr +1));
+                                        	}
+                                        	else {
+                                                outlet_relay_status |= (1 << ctr);
+                                        	}
+                                	}
+                        	}
+                        	if(!outlet_sts[board_num] && outlet_relay_status)
+                        	{
+                                	cold_boot_flag++;
+                        	}
+			}
+                        board_num++;
+                }
+
+
+                if (cold_boot_flag == num_outlet_cards) {
+                        //cold start detected
+                        for( mycs = 1; mycs < num_outlet_cards * 2 ; mycs = mycs + 2)
+                        {
+				cs = (num_outlet_cards*2) - mycs;
+                                //Read Interrupt staus reg ,prevent FPGA timed out
+                                val = spi_8313_read(PMHD_FPGA_INT_STATUS,16,cs); // uncomment later
+                                // LED follow the relay state
+                                spi_8313_write(PMHD_FPGA_LED_CONTROL4,0xFF,cs);
+                                spi_8313_write(PMHD_FPGA_LED_CONTROL3,0xFF,cs);
+                                spi_8313_write(PMHD_FPGA_LED_CONTROL2,0xFF,cs);
+                                spi_8313_write(PMHD_FPGA_LED_CONTROL1,0xFF,cs);
+                        }
+
+
+                        delay_time = (unsigned short)uboot_struct->cold_start_delay;
+                        if( delay_time != 0 ) {
+                                printf("Cold Start sleeping for %d seconds\n",delay_time);
+                                udelay (delay_time*1000000); // Apply cold start delay (secs)
+                        }
+        		blink_display_max6950(2);
+                        // Turn outlets ON based on the saved status
+                        board_num = 0;
+                        for( mycs = 1; mycs < num_outlet_cards * 2 ; mycs = mycs + 2)
+                        {
+				cs = (num_outlet_cards*2) - mycs;
+				if((basic_model_flag)||(metered_only)) 
+				{
+					spi_8313_write(PMHD_FPGA_RELAY_CONTROL2,0xff,cs);
+					val = spi_8313_read(PMHD_FPGA_RELAY_CONTROL2,16,cs);
+					spi_8313_write(PMHD_FPGA_RELAY_CONTROL1,0xff ,cs);
+					val = spi_8313_read(PMHD_FPGA_RELAY_CONTROL1,16,cs);
+				}
+				else  
+				{
+                                	outlet_relay_status = 0x0000;
+                                	for( ctr = 0; ctr < num_outlet; ctr++ )
+                                	{
+                                        	delay_time = (unsigned short)uboot_struct->post_on_delay[ctr + board_num*num_outlet];
+
+                                        	if( delay_time != 0xFFFF ) //If outlet ON
+                                        	{
+                                                	if( num_outlet == 3 ){
+                                                        	outlet_relay_status |= (1 << (2*ctr +1));
+                                                	}
+                                                	else {
+                                                        	outlet_relay_status |= (1 << ctr);
+                                                	}
+                                        	}
+                                        	spi_8313_write(PMHD_FPGA_RELAY_CONTROL2,(outlet_relay_status&0xff),cs);
+						val = spi_8313_read(PMHD_FPGA_RELAY_CONTROL2,16,cs);
+                                        	spi_8313_write(PMHD_FPGA_RELAY_CONTROL1,(outlet_relay_status >> 8) ,cs);
+						val = spi_8313_read(PMHD_FPGA_RELAY_CONTROL1,16,cs);
+                                        	if(( delay_time != 0 )&&(delay_time != 0xFFFF)) {
+                                                	printf("Post on delay, sleeping for %d 10th of seconds\n",delay_time);
+                                                	udelay (delay_time*100000); // post on delay
+
+                                        	}
+						if (ctrlc()) { // if user want to quit , bts bug id 50318 
+							break;
+						}		
+                                	}
+				}
+                                board_num++;
+                        }
+                }
+        }
+        blink_display_max6950(3);
+	spi_8313_deinit();
+}
Index: u-boot-1.3.1/common/main.c
===================================================================
--- u-boot-1.3.1.orig/common/main.c
+++ u-boot-1.3.1/common/main.c
@@ -55,7 +55,7 @@ extern int do_reset (cmd_tbl_t *cmdtp, i
 #endif
 
 extern int do_bootd (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[]);
-
+extern void chk_hw_boot_update_outlet_sts(void);
 
 #define MAX_DELAY_STOP_STR 32
 
@@ -281,6 +281,8 @@ static __inline__ int abortboot(int boot
 void main_loop (void)
 {
 
+ chk_hw_boot_update_outlet_sts();
+
 #ifdef CONFIG_SILENT_CONSOLE
 	char *StrPtr;
 #endif
Index: u-boot-1.3.1/cpu/mpc83xx/Makefile
===================================================================
--- u-boot-1.3.1.orig/cpu/mpc83xx/Makefile
+++ u-boot-1.3.1/cpu/mpc83xx/Makefile
@@ -29,7 +29,7 @@ LIB	= $(obj)lib$(CPU).a
 
 START	= start.o
 COBJS	= traps.o cpu.o cpu_init.o speed.o interrupts.o \
-	  spd_sdram.o ecc.o qe_io.o pci.o
+	  spd_sdram.o ecc.o qe_io.o pci.o spi.o
 
 SRCS	:= $(START:.o=.S) $(SOBJS:.o=.S) $(COBJS:.o=.c)
 OBJS	:= $(addprefix $(obj),$(SOBJS) $(COBJS))
Index: u-boot-1.3.1/cpu/mpc83xx/spi.c
===================================================================
--- /dev/null
+++ u-boot-1.3.1/cpu/mpc83xx/spi.c
@@ -0,0 +1,327 @@
+/*
+ * Copyright (c) 2001 Navin Boppuri / Prashant Patel
+ *	<nboppuri@trinetcommunication.com>,
+ *	<pmpatel@trinetcommunication.com>
+ * Copyright (c) 2001 Gerd Mennchen <Gerd.Mennchen@icn.siemens.de>
+ * Copyright (c) 2001-2003 Wolfgang Denk, DENX Software Engineering, <wd@denx.de>.
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+/*
+ * MPC8313 CPM SPI interface.
+ *
+ * Parts of this code are probably not portable and/or specific to
+ * the board which I used for the tests. Please send fixes/complaints
+ * to wd@denx.de
+ *
+ */
+
+#include <common.h>
+
+#define SPI_BASE_ADDR  	 		0x00007000 
+#define SPI_SPMODE_ADDR_OFFSET 		0x020	
+#define SPI_SPIE_ADDR_OFFSET   		0x024	
+#define SPI_SPIM_ADDR_OFFSET   		0x028
+#define SPI_SPCOM_ADDR_OFFSET   	0x02C
+#define SPI_SPITD_ADDR_OFFSET   	0x030
+#define SPI_SPIRD_ADDR_OFFSET   	0x034
+// GPIO REGISTER OFFSETS
+#define GPDIR_ADDR_OFFSET               0xC00
+#define GPODR_ADDR_OFFSET               0xC04
+#define GPDAT_ADDR_OFFSET		0xC08
+/* SPI Controller mode register definitions */
+#define SPMODE_CI_INACTIVEHIGH  (1 << 29)
+#define SPMODE_CP_BEGIN_EDGECLK (1 << 28)
+#define SPMODE_DIV16            (1 << 27)
+#define SPMODE_REV              (1 << 26)
+#define SPMODE_MS               (1 << 25)
+#define SPMODE_ENABLE           (1 << 24)
+#define SPMODE_LEN(x)           ((x) << 20)
+#define SPMODE_PM(x)            ((x) << 16)
+
+/*
+DISPLAY Control registers
+*/
+#define MAX6950_REGISTER_DECODE         1
+#define MAX6950_REGISTER_INTENSITY      2
+#define MAX6950_REGISTER_SCANLIMIT      3
+#define MAX6950_REGISTER_CONFIG         4
+#define MAX6950_REGISTER_DISPLAYTEST    7
+#define MAX6950_REGISTER_P0             0x20
+#define MAX6950_REGISTER_P1             0x40
+#define MAX6950_REGISTER_P0_1           0x60
+
+#define MAX6950_CONFIG_GLOBALBLINK      0x08
+#define MAX6950_CONFIG_FASTBLINK        0x04
+#define MAX6950_CONFIG_UP               0x01
+
+
+/*
+ * Default for SPI Mode:
+ *      SPI MODE 0 (inactive low, phase middle, MSB, 8-bit length, slow clk
+ */
+#define SPMODE_INIT_VAL (SPMODE_CI_INACTIVEHIGH | SPMODE_DIV16 | SPMODE_REV | \
+                         SPMODE_MS | SPMODE_LEN(15) | SPMODE_PM(0xf))
+
+/* SPIE register values */
+#define SPIE_NE         0x00000200      /* Not empty */
+#define SPIE_NF         0x00000100      /* Not full */
+/* SPIM register values */
+#define SPIM_NE         0x00000200      /* Not empty */
+#define SPIM_NF         0x00000100      /* Not full */
+/*SPCOM register values */
+
+#define SPCOM_LST       0x00400000   
+
+#define PMHD_FPGA_REGISTER_WRITE        0x40 //Remove later
+
+static void spi_8313_activate_cs (int cs)
+{
+	volatile unsigned int data;
+	switch(cs)
+	{
+		case 0:
+			data = 	*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET ); // read the GPDATA REG
+			*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET)= (data & ~0x04000000L) | 0x18000000L;//selectmax6950
+			break;
+		case 1:
+			data = 	*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET ); // read the GPDATA REG
+			*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET)= (data & ~0x5c000000L) | 0x20000000L; //selectFPGA1
+			break;
+		case 2:
+			data = 	*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET ); // read the GPDATA REG
+			*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET)= (data & ~0x54000000L) | 0x28000000L; //select MC1
+			break;
+		case 3:
+			data = 	*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET ); // read the GPDATA REG
+			*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET)= (data & ~0x3c000000L) | 0x40000000L;//selectFPGA2
+			break;
+		case 4:
+			data = 	*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET ); // read the GPDATA REG
+			*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET)= (data & ~0x34000000L) | 0x48000000L; //select MC2
+			break;
+		case 5:
+			data = 	*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET ); // read the GPDATA REG
+			*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET)= (data & ~0x1c000000L) | 0x60000000L; //selectFPGA3 
+			break;
+		case 6:
+			data = 	*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET ); // read the GPDATA REG
+			*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET)= (data & ~0x14000000L) | 0x68000000L; //select MC3
+			break;
+		default:
+			printf("\nInvalid Chip Select"); 
+			break;
+	}	
+}
+
+static void spi_8313_deactivate_cs(void)
+{
+	volatile unsigned int data;
+	
+	data = 	*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET ); // read the GPDATA REG
+	*(volatile u32 *) (CFG_IMMR + GPDAT_ADDR_OFFSET) = data | 0x04000000L;
+}
+
+static void write_reg(unsigned int reg,unsigned int val)
+{
+	*(volatile u32 *) (CFG_IMMR + SPI_BASE_ADDR + reg)= val;
+}
+
+static unsigned int read_reg(unsigned int reg)
+{
+	volatile unsigned int val;
+
+	val = *(volatile u32 *) (CFG_IMMR + SPI_BASE_ADDR + reg);
+	return val;
+}
+
+void spi_8313_init(void)
+{
+	volatile unsigned int data;
+	volatile unsigned int regval;
+        
+	//SPI controller initializations 
+	write_reg( SPI_SPMODE_ADDR_OFFSET,0x00000000 );       
+	write_reg( SPI_SPIM_ADDR_OFFSET,0x00000000 );       
+	write_reg( SPI_SPCOM_ADDR_OFFSET,0x00000000 );       
+	write_reg(SPI_SPIE_ADDR_OFFSET,0xffffffff );      
+        
+	// Enable SPI interface 
+        regval =  SPMODE_INIT_VAL | SPMODE_ENABLE;
+	write_reg(SPI_SPMODE_ADDR_OFFSET,regval );    
+	
+	// SET OPEN DRAIN REG 
+	data = 	*(volatile u32 *) (CFG_IMMR + GPODR_ADDR_OFFSET); // read the GPDOR OPEN DRAIN REG
+	*(volatile u32 *) (CFG_IMMR + GPODR_ADDR_OFFSET)=  data & ~0x7C000000;
+	
+	// SET GPIO DIR OUT 
+	data = 	*(volatile u32 *) (CFG_IMMR + GPDIR_ADDR_OFFSET ); // read the GPDIR REG
+	*(volatile u32 *) (CFG_IMMR + GPDIR_ADDR_OFFSET)=  data | 0x7C000000;
+}
+
+void spi_8313_deinit(void)
+{
+	unsigned int regval;
+	unsigned int val;
+	
+	val = read_reg(SPI_SPMODE_ADDR_OFFSET);    
+        regval = val & (~SPMODE_ENABLE);
+	write_reg(SPI_SPMODE_ADDR_OFFSET,regval );    
+}
+	
+unsigned int spi_8313_read(int spi_reg,int type,int cs)
+{
+	volatile unsigned int val;
+	int ctr = 0;
+	int shift;
+
+	shift = (type / 8 ) - 1;
+	//activate chip select
+	spi_8313_activate_cs (cs);
+	udelay (1000);
+      	//Wait for Tx Complete, by reading the event register
+	ctr = 0;
+	while (ctr < 4){
+		val = read_reg(SPI_SPIE_ADDR_OFFSET);     
+		if ((val & SPIE_NF ) != 0 ){
+			write_reg( SPI_SPCOM_ADDR_OFFSET,SPCOM_LST);   // only one byte to tx, end of frame indication    
+			write_reg( SPI_SPITD_ADDR_OFFSET,((spi_reg * 2) << (8*shift)));//Transfer register address to be read 
+			 break;
+		}
+		ctr++;
+		udelay (1000);
+	}
+	
+	//check receive
+	ctr = 0;
+	while (ctr < 4){
+		val = read_reg(SPI_SPIE_ADDR_OFFSET);      
+		if ((val & SPIE_NE )!= 0) {
+			val = read_reg(SPI_SPIRD_ADDR_OFFSET);      
+			break;
+		}
+		udelay (1000);
+		ctr++;
+	}
+ 
+	//deactivate chip select
+	spi_8313_deactivate_cs ();
+	
+	return val;
+}
+
+unsigned int spi_8313_write(int spi_reg,unsigned char reg_val, int cs )
+{
+	volatile unsigned int val;
+	unsigned int write_val = 0;
+	int ctr = 0;
+
+	//activate chip select
+	spi_8313_activate_cs (cs);
+	udelay (1000);
+
+	//Wait for Tx Complete, by reading the event register
+	ctr = 0;
+	while (ctr < 4){
+		val = read_reg(SPI_SPIE_ADDR_OFFSET);     
+		if ((val & SPIE_NF ) != 0 ){
+			write_val =(((spi_reg * 2) + PMHD_FPGA_REGISTER_WRITE ) << 8) + reg_val;	
+			write_reg(SPI_SPCOM_ADDR_OFFSET,SPCOM_LST);   // only one byte to tx, end of frame indication     
+			write_reg(SPI_SPITD_ADDR_OFFSET,write_val);// Transfer the register address to be written 
+			break;	
+		}
+		udelay (1000);
+		ctr++;
+	}
+ 
+	//deactivate chip select
+	spi_8313_deactivate_cs ();
+	
+	return val;
+}
+
+unsigned int spi_8313_led_write(int spi_reg,unsigned char reg_val, int cs )
+{
+        volatile unsigned int val;
+        unsigned int write_val = 0;
+        int ctr = 0;
+
+        //activate chip select
+        spi_8313_activate_cs (cs);
+        udelay (1000);
+
+        //Wait for Tx Complete, by reading the event register
+        ctr = 0;
+        while (ctr < 4){
+                val = read_reg(SPI_SPIE_ADDR_OFFSET);
+                if ((val & SPIE_NF ) != 0 ){
+                        write_val =(spi_reg << 8) + reg_val;
+                        write_reg(SPI_SPCOM_ADDR_OFFSET,SPCOM_LST);   // only one byte to tx, end of frame indication
+                        write_reg(SPI_SPITD_ADDR_OFFSET,write_val);// Transfer the register address to be written
+                        break;
+                }
+                udelay (1000);
+                ctr++;
+        }
+
+        //deactivate chip select
+        spi_8313_deactivate_cs ();
+        return val;
+}
+
+
+static void start_max6950(void)
+{
+	 int i;
+        /* Initialize display */
+        spi_8313_led_write(MAX6950_REGISTER_DISPLAYTEST,0, 0);
+        spi_8313_led_write(MAX6950_REGISTER_DECODE,0, 0 );
+        spi_8313_led_write(MAX6950_REGISTER_INTENSITY,8, 0);
+        spi_8313_led_write(MAX6950_REGISTER_SCANLIMIT,5, 0 );
+        spi_8313_led_write(MAX6950_REGISTER_CONFIG,0 , 0 );
+        for (i = 0; i < 5; i ++) {
+                spi_8313_led_write(MAX6950_REGISTER_P0_1 + i,0, 0 );
+        }
+}
+
+void blink_display_max6950(int num_blink)
+{
+        int pos = 0;
+        int ctr= 0;
+        spi_8313_init();
+        start_max6950();
+
+        int ix = 0;
+        spi_8313_led_write(MAX6950_REGISTER_CONFIG,MAX6950_CONFIG_UP | MAX6950_CONFIG_FASTBLINK |MAX6950_CONFIG_GLOBALBLINK, 0);
+
+        for (ix = 0; ix < 5; ix++){
+                if( ix < num_blink) {
+                        spi_8313_led_write(MAX6950_REGISTER_P0 + ix,0x01,0);
+                        spi_8313_led_write(MAX6950_REGISTER_P1 + ix, 0x00,0);
+                }
+                else
+                {
+                        spi_8313_led_write(MAX6950_REGISTER_P0 + ix,0x00,0);
+                        spi_8313_led_write(MAX6950_REGISTER_P1 + ix, 0x00,0);
+                }
+        }
+
+}
+
Index: u-boot-1.3.1/include/configs/cold_boot_cfg.h
===================================================================
--- /dev/null
+++ u-boot-1.3.1/include/configs/cold_boot_cfg.h
@@ -0,0 +1,30 @@
+#define NUMBER_OUTLETS 24
+
+typedef struct {
+    unsigned short post_on_delay[NUMBER_OUTLETS]; // 0xFFFF means outlet's status is OFF,
+                                                  // so we don't need post on delay
+    unsigned short cold_start_delay;
+    unsigned short unused1;        
+    unsigned short unused2;
+    unsigned short crc;
+} __attribute__ ((packed)) cold_boot_cfg_t;
+
+// Implementation of CCITT 16bit CRC.
+// Initial seed is 0xffff
+// and whole buffer should be passed at once
+// Polynomial is x^16 + x^12 + x^5 + 1
+static __inline__ unsigned short crc_ccitt(unsigned char *buf, int len) {
+
+    register unsigned short i;
+    register unsigned short crc = 0xffff;
+
+    for (i = 0; i < len; i++) {
+        crc  = (unsigned char)(crc >> 8) | (crc << 8);
+        crc ^= *buf++;
+        crc ^= (unsigned char)(crc & 0xff) >> 4;
+        crc ^= crc << 12;
+        crc ^= (crc & 0xff) << 5;
+    }
+    return crc;
+}
+
