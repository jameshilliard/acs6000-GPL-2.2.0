Misc fix for gianfar driver

- Fix frame size calculation when hardware VLAN acceleration is on.
  In gfar_change_mtu function, the frame size calculation was wrong when VLAN
  acceleration is enable.

- Fix the Rx BD status checking flag. RXBD_LAST bit checking is required
  to prevent the processing of the incompleted reception frames.

- Fix Rx/Tx HW interrupt coalescing counter reset logic. Disabling is
  required before resetting the counter.

- Update the Default both Rx and Tx coalescing timer threashold. Formerly 4
  is set which is equal to 1.5 frame at the line rate of 1GbE interface,
  and it doesn't match to the coalescing frame count which is set to 16.
  Threashold 21 is matched to frame count 16.

- Buffer stashing parameter change to 96 from 64 in order to cover the
  Layer 4 header.

- In order to mitigate the Tx completion interrupt, mask and poll the Tx
  completion within the Rx BD ring polling routine

- Disable Rx HW coalescing when NAPI is enable.

Signed-off-by: Dai Haruki <dai.haruki@freescale.com>
Signed-off-by: Li Yang <leoli@freescale.com>
---
 drivers/net/gianfar.c |   77 +++++++++++++++++++++++++++++++++----------------
 drivers/net/gianfar.h |   21 +++++++++++--
 2 files changed, 69 insertions(+), 29 deletions(-)

diff --git a/drivers/net/gianfar.c b/drivers/net/gianfar.c
index f926905..ede9c1b 100644
--- a/drivers/net/gianfar.c
+++ b/drivers/net/gianfar.c
@@ -1176,7 +1176,7 @@ static int gfar_change_mtu(struct net_device *dev, int new_mtu)
 	int frame_size = new_mtu + ETH_HLEN;
 
 	if (priv->vlan_enable)
-		frame_size += VLAN_ETH_HLEN;
+		frame_size += VLAN_HLEN;
 
 	if (gfar_uses_fcb(priv))
 		frame_size += GMAC_FCB_LEN;
@@ -1242,18 +1242,13 @@ static void gfar_timeout(struct net_device *dev)
 	netif_schedule(dev);
 }
 
-/* Interrupt Handler for Transmit complete */
-static irqreturn_t gfar_transmit(int irq, void *dev_id)
+/* Transmit ring clean up routine */
+int gfar_clean_tx_ring(struct net_device *dev)
 {
-	struct net_device *dev = (struct net_device *) dev_id;
-	struct gfar_private *priv = netdev_priv(dev);
 	struct txbd8 *bdp;
+	struct gfar_private *priv = netdev_priv(dev);
+	int howmany = 0;
 
-	/* Clear IEVENT */
-	gfar_write(&priv->regs->ievent, IEVENT_TX_MASK);
-
-	/* Lock priv */
-	spin_lock(&priv->txlock);
 	bdp = priv->dirty_tx;
 	while ((bdp->status & TXBD_READY) == 0) {
 		/* If dirty_tx and cur_tx are the same, then either the */
@@ -1262,7 +1257,7 @@ static irqreturn_t gfar_transmit(int irq, void *dev_id)
 		if ((bdp == priv->cur_tx) && (netif_queue_stopped(dev) == 0))
 			break;
 
-		priv->stats.tx_packets++;
+		howmany++;
 
 		/* Deferred means some collisions occurred during transmit, */
 		/* but we eventually sent the packet. */
@@ -1276,6 +1271,9 @@ static irqreturn_t gfar_transmit(int irq, void *dev_id)
 		    (priv->skb_dirtytx +
 		     1) & TX_RING_MOD_MASK(priv->tx_ring_size);
 
+		/* Clean BD length for empty detection */
+		bdp->length = 0;
+
 		/* update bdp to point at next bd in the ring (wrapping if necessary) */
 		if (bdp->status & TXBD_WRAP)
 			bdp = priv->tx_bd_base;
@@ -1290,13 +1288,32 @@ static irqreturn_t gfar_transmit(int irq, void *dev_id)
 			netif_wake_queue(dev);
 	} /* while ((bdp->status & TXBD_READY) == 0) */
 
+	priv->stats.tx_packets += howmany;
+
+	return howmany;
+}
+
+/* Interrupt Handler for Transmit complete */
+static irqreturn_t gfar_transmit(int irq, void *dev_id)
+{
+	struct net_device *dev = (struct net_device *) dev_id;
+	struct gfar_private *priv = netdev_priv(dev);
+
+	/* Clear IEVENT */
+	gfar_write(&priv->regs->ievent, IEVENT_TX_MASK);
+
+	/* Lock priv */
+	spin_lock(&priv->txlock);
+
+	gfar_clean_tx_ring(dev);
+
 	/* If we are coalescing the interrupts, reset the timer */
 	/* Otherwise, clear it */
-	if (priv->txcoalescing)
+	if (likely(priv->txcoalescing)) {
+		gfar_write(&priv->regs->txic, 0);
 		gfar_write(&priv->regs->txic,
 			   mk_ic_value(priv->txcount, priv->txtime));
-	else
-		gfar_write(&priv->regs->txic, 0);
+	}
 
 	spin_unlock(&priv->txlock);
 
@@ -1384,15 +1401,15 @@ irqreturn_t gfar_receive(int irq, void *dev_id)
 	unsigned long flags;
 #endif
 
+	/* support NAPI */
+#ifdef CONFIG_GFAR_NAPI
 	/* Clear IEVENT, so rx interrupt isn't called again
 	 * because of this interrupt */
-	gfar_write(&priv->regs->ievent, IEVENT_RX_MASK);
+	gfar_write(&priv->regs->ievent, IEVENT_RTX_MASK);
 
-	/* support NAPI */
-#ifdef CONFIG_GFAR_NAPI
 	if (netif_rx_schedule_prep(dev)) {
 		tempval = gfar_read(&priv->regs->imask);
-		tempval &= IMASK_RX_DISABLED;
+		tempval &= IMASK_RTX_DISABLED;
 		gfar_write(&priv->regs->imask, tempval);
 
 		__netif_rx_schedule(dev);
@@ -1403,17 +1420,20 @@ irqreturn_t gfar_receive(int irq, void *dev_id)
 				gfar_read(&priv->regs->imask));
 	}
 #else
+	/* Clear IEVENT, so rx interrupt isn't called again
+	 * because of this interrupt */
+	gfar_write(&priv->regs->ievent, IEVENT_RX_MASK);
 
 	spin_lock_irqsave(&priv->rxlock, flags);
 	gfar_clean_rx_ring(dev, priv->rx_ring_size);
 
 	/* If we are coalescing interrupts, update the timer */
 	/* Otherwise, clear it */
-	if (priv->rxcoalescing)
+	if (likely(priv->rxcoalescing)) {
+		gfar_write(&priv->regs->rxic, 0);
 		gfar_write(&priv->regs->rxic,
 			   mk_ic_value(priv->rxcount, priv->rxtime));
-	else
-		gfar_write(&priv->regs->rxic, 0);
+	}
 
 	spin_unlock_irqrestore(&priv->rxlock, flags);
 #endif
@@ -1520,7 +1540,8 @@ int gfar_clean_rx_ring(struct net_device *dev, int rx_work_limit)
 
 		if (!(bdp->status &
 		      (RXBD_LARGE | RXBD_SHORT | RXBD_NONOCTET
-		       | RXBD_CRCERR | RXBD_OVERRUN | RXBD_TRUNCATED))) {
+		       | RXBD_CRCERR | RXBD_OVERRUN | RXBD_TRUNCATED))
+		    && (bdp->status & RXBD_LAST)) {
 			/* Increment the number of packets */
 			priv->stats.rx_packets++;
 			howmany++;
@@ -1574,6 +1595,7 @@ static int gfar_poll(struct net_device *dev, int *budget)
 	int howmany;
 	struct gfar_private *priv = netdev_priv(dev);
 	int rx_work_limit = *budget;
+	unsigned long int flags;
 
 	if (rx_work_limit > dev->quota)
 		rx_work_limit = dev->quota;
@@ -1584,6 +1606,11 @@ static int gfar_poll(struct net_device *dev, int *budget)
 	rx_work_limit -= howmany;
 	*budget -= howmany;
 
+	/* Lock priv */
+	spin_lock_irqsave(&priv->txlock, flags);
+	gfar_clean_tx_ring(dev);
+	spin_unlock_irqrestore(&priv->txlock, flags);
+
 	if (rx_work_limit > 0) {
 		netif_rx_complete(dev);
 
@@ -1594,11 +1621,11 @@ static int gfar_poll(struct net_device *dev, int *budget)
 
 		/* If we are coalescing interrupts, update the timer */
 		/* Otherwise, clear it */
-		if (priv->rxcoalescing)
+		if (likely(priv->rxcoalescing)) {
+			gfar_write(&priv->regs->rxic, 0);
 			gfar_write(&priv->regs->rxic,
 				   mk_ic_value(priv->rxcount, priv->rxtime));
-		else
-			gfar_write(&priv->regs->rxic, 0);
+		}
 	}
 
 	/* Return 1 if there's more work to do */
diff --git a/drivers/net/gianfar.h b/drivers/net/gianfar.h
index d8e779c..dba751a 100644
--- a/drivers/net/gianfar.h
+++ b/drivers/net/gianfar.h
@@ -103,7 +103,7 @@ extern const char gfar_driver_version[];
 #define DEFAULT_FIFO_TX_STARVE 0x40
 #define DEFAULT_FIFO_TX_STARVE_OFF 0x80
 #define DEFAULT_BD_STASH 1
-#define DEFAULT_STASH_LENGTH	64
+#define DEFAULT_STASH_LENGTH	96
 #define DEFAULT_STASH_INDEX	0
 
 /* The number of Exact Match registers */
@@ -123,13 +123,24 @@ extern const char gfar_driver_version[];
 #define GFAR_100_TIME   2560
 #define GFAR_10_TIME    25600
 
+#ifndef CONFIG_GFAR_NAPI
+/* Non NAPI Case */
 #define DEFAULT_TX_COALESCE 1
 #define DEFAULT_TXCOUNT	16
-#define DEFAULT_TXTIME	4
+#define DEFAULT_TXTIME	21
 
 #define DEFAULT_RX_COALESCE 1
 #define DEFAULT_RXCOUNT	16
-#define DEFAULT_RXTIME	4
+#define DEFAULT_RXTIME	21
+#else /* CONFIG_GFAR_NAPI */
+#define DEFAULT_TX_COALESCE 1
+#define DEFAULT_TXCOUNT	16
+#define DEFAULT_TXTIME	21
+
+#define DEFAULT_RX_COALESCE 0
+#define DEFAULT_RXCOUNT	0
+#define DEFAULT_RXTIME	21
+#endif /* CONFIG_GFAR_NAPI */
 
 #define TBIPA_VALUE		0x1f
 #define MIIMCFG_INIT_VALUE	0x00000007
@@ -243,6 +254,7 @@ extern const char gfar_driver_version[];
 #define IEVENT_PERR		0x00000001
 #define IEVENT_RX_MASK          (IEVENT_RXB0 | IEVENT_RXF0)
 #define IEVENT_TX_MASK          (IEVENT_TXB | IEVENT_TXF)
+#define IEVENT_RTX_MASK         (IEVENT_RX_MASK | IEVENT_TX_MASK)
 #define IEVENT_ERR_MASK         \
 (IEVENT_RXC | IEVENT_BSY | IEVENT_EBERR | IEVENT_MSRO | \
  IEVENT_BABT | IEVENT_TXC | IEVENT_TXE | IEVENT_LC \
@@ -270,11 +282,12 @@ extern const char gfar_driver_version[];
 #define IMASK_FIQ		0x00000004
 #define IMASK_DPE		0x00000002
 #define IMASK_PERR		0x00000001
-#define IMASK_RX_DISABLED ~(IMASK_RXFEN0 | IMASK_BSY)
 #define IMASK_DEFAULT  (IMASK_TXEEN | IMASK_TXFEN | IMASK_TXBEN | \
 		IMASK_RXFEN0 | IMASK_BSY | IMASK_EBERR | IMASK_BABR | \
 		IMASK_XFUN | IMASK_RXC | IMASK_BABT | IMASK_DPE \
 		| IMASK_PERR)
+#define IMASK_RTX_DISABLED ((~(IMASK_RXFEN0 | IMASK_TXFEN | IMASK_BSY)) \
+			   & IMASK_DEFAULT)
 
 /* Fifo management */
 #define FIFO_TX_THR_MASK	0x01ff
-- 
1.5.3.4.498.g9c514

