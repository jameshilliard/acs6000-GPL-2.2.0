--- busybox-1.5.0.orig/networking/ifupdown.c	2007-03-22 13:21:23.000000000 -0700
+++ busybox-1.5.0/networking/ifupdown.c	2007-11-30 15:14:13.000000000 -0800
@@ -83,6 +83,13 @@
 	struct mapping_defn_t *mappings;
 };
 
+/* XXX - ifupdown-spurious-environ.patch -- appears to be long obsolete,
+ * but is carried forward because it doesn't seem to hurt anything and
+ * it's non-obvious how to remove the patch from OE without breaking
+ * old builds. MJW
+ */
+#define environ local_environ
+
 #define OPTION_STR "anvf" USE_FEATURE_IFUPDOWN_MAPPING("m") "i:"
 enum {
 	OPT_do_all = 0x1,
@@ -321,20 +328,69 @@
 #endif
 }
 
+int wstr2file(const char *file, const char *value) {
+	FILE *fd;
+
+	fd = fopen(file, "r+");
+	if (fd != NULL) {
+		fwrite(value, 1, 1, fd);
+		fclose(fd);
+		return 1;
+	}
+	else {
+		return 0;
+	}
+}
+
+static int enable_stateless(struct interface_defn_t * ifd, execfn * exec)
+{	char *out;
+	int result;
+
+	out = parse("/proc/sys/net/ipv6/conf/%iface%/autoconf", ifd);
+	result = wstr2file(out, "1");
+	out = parse("/proc/sys/net/ipv6/conf/%iface%/accept_ra", ifd);
+	result += wstr2file(out, "1");
+	out = parse("/proc/sys/net/ipv6/conf/%iface%/accept_redirects", ifd);
+	result += wstr2file(out, "1");
+	out = parse("/proc/sys/net/ipv6/conf/%iface%/router_solicitations", ifd);
+	result += wstr2file(out, "3");
+
+	return ((result == 4) ? 4 : 0);
+}
+
+static int disable_stateless(struct interface_defn_t * ifd, execfn * exec)
+{
+	char *out;
+	int result;
+
+	out = parse("/proc/sys/net/ipv6/conf/%iface%/autoconf", ifd);
+	result = wstr2file(out, "0");
+	out = parse("/proc/sys/net/ipv6/conf/%iface%/accept_ra", ifd);
+	result += wstr2file(out, "0");
+	out = parse("/proc/sys/net/ipv6/conf/%iface%/accept_redirects", ifd);
+	result += wstr2file(out, "0");
+	out = parse("/proc/sys/net/ipv6/conf/%iface%/router_solicitations", ifd);
+	result += wstr2file(out, "0");
+
+	return ((result == 4) ? 4 : 0);
+}
+
 static int static_up6(struct interface_defn_t *ifd, execfn *exec)
 {
 	int result;
 #if ENABLE_FEATURE_IFUPDOWN_IP
 	result = execute("ip addr add %address%/%netmask% dev %iface%[[ label %label%]]", ifd, exec);
 	result += execute("ip link set[[ mtu %mtu%]][[ address %hwaddress%]] %iface% up", ifd, exec);
+	result += enable_stateless(ifd, exec);
 	/* Was: "[[ ip ....%gateway% ]]". Removed extra spaces w/o checking */
 	result += execute("[[ip route add ::/0 via %gateway%]]", ifd, exec);
 #else
 	result = execute("ifconfig %iface%[[ media %media%]][[ hw %hwaddress%]][[ mtu %mtu%]] up", ifd, exec);
 	result += execute("ifconfig %iface% add %address%/%netmask%", ifd, exec);
+	result += enable_stateless(ifd, exec);
 	result += execute("[[route -A inet6 add ::/0 gw %gateway%]]", ifd, exec);
 #endif
-	return ((result == 3) ? 3 : 0);
+	return ((result == 7) ? 7 : 0);
 }
 
 static int static_down6(struct interface_defn_t *ifd, execfn *exec)
@@ -350,12 +406,13 @@
 static int v4tunnel_up(struct interface_defn_t *ifd, execfn *exec)
 {
 	int result;
-	result = execute("ip tunnel add %iface% mode sit remote "
+	result = enable_stateless(ifd, exec);
+	result += execute("ip tunnel add %iface% mode sit remote "
 			"%endpoint%[[ local %local%]][[ ttl %ttl%]]", ifd, exec);
 	result += execute("ip link set %iface% up", ifd, exec);
 	result += execute("ip addr add %address%/%netmask% dev %iface%", ifd, exec);
 	result += execute("[[ip route add ::/0 via %gateway%]]", ifd, exec);
-	return ((result == 4) ? 4 : 0);
+	return ((result == 8) ? 8 : 0);
 }
 
 static int v4tunnel_down(struct interface_defn_t * ifd, execfn * exec)
@@ -364,7 +421,54 @@
 }
 #endif
 
+static int stateless_up(struct interface_defn_t * ifd, execfn * exec)
+{
+	int result;
+	result = execute("ip link set[[ mtu %mtu%]][[ address %hwaddress%]] %iface% up", ifd, exec);
+	result += enable_stateless(ifd, exec);
+	return ((result == 5) ? 5 : 0);
+}
+
+static int stateless_down(struct interface_defn_t * ifd, execfn * exec)
+{
+	return execute("ip link set %iface% down", ifd, exec);
+}
+
+static int manual_up6(struct interface_defn_t * ifd, execfn * exec)
+{
+	int result;
+	result = execute("ip link set[[ mtu %mtu%]][[ address %hwaddress%]] %iface% up", ifd, exec);
+	result += disable_stateless(ifd, exec);
+	result += execute("ip -f inet6 addr flush dev %iface%", ifd, exec);
+	return ((result == 6) ? 6 : 0);
+}
+
+static int manual_down6(struct interface_defn_t * ifd, execfn * exec)
+{
+	return execute("ip link set %iface% down", ifd, exec);
+}
+
+static int dhcpv6_up(struct interface_defn_t * ifd, execfn * exec)
+{
+	int result;
+	result = execute("ip link set[[ mtu %mtu%]][[ address %hwaddress%]] %iface% up", ifd, exec);
+	result += enable_stateless(ifd, exec);
+	result += execute("dhcp6c -p /var/run/dhcp6c-%iface%.pid %iface%", ifd, exec);
+	return ((result == 6) ? 6 : 0);
+}
+
+static int dhcpv6_down(struct interface_defn_t * ifd, execfn * exec)
+{
+	int result;
+	result = execute("kill -s TERM $(cat /var/run/dhcp6c-%iface%.pid 2>/dev/null) 2>/dev/null", ifd, exec);
+	result += execute("ip link set %iface% down", ifd, exec);
+	return ((result == 2) ? 2 : 0);
+}
+
 static const struct method_t methods6[] = {
+	{ "stateless", stateless_up, stateless_down, },
+	{ "manual", manual_up6, manual_down6, },
+	{ "dhcpv6", dhcpv6_up, dhcpv6_down, },
 #if ENABLE_FEATURE_IFUPDOWN_IP
 	{ "v4tunnel", v4tunnel_up, v4tunnel_down, },
 #endif
@@ -502,7 +606,8 @@
 
 static int manual_up_down(struct interface_defn_t *ifd, execfn *exec)
 {
-	return 1;
+	int result = execute("ip -f inet addr flush dev %iface%", ifd, exec);
+	return result;
 }
 
 static int bootp_up(struct interface_defn_t *ifd, execfn *exec)
