Index: pam_radius-1.3.15/Makefile
===================================================================
--- pam_radius-1.3.15.orig/Makefile
+++ pam_radius-1.3.15/Makefile
@@ -17,6 +17,8 @@ VERSION=1.3.15
 #
 CFLAGS += -Wall -fPIC
 
+LDFLAGS += -lpam -shared -lgsp_auth
+
 ######################################################################
 #
 #  The default rule to build everything.
@@ -39,7 +41,7 @@ pam_radius_auth.o: pam_radius_auth.c pam
 #  On Solaris, you might try using '-G', instead.
 #
 pam_radius_auth.so: pam_radius_auth.o md5.o
-	$(CC) -shared -o pam_radius_auth.so pam_radius_auth.o md5.o
+	$(CC) -o pam_radius_auth.so pam_radius_auth.o md5.o $(LDFLAGS)
 
 ######################################################################
 #
Index: pam_radius-1.3.15/pam_radius_auth.c
===================================================================
--- pam_radius-1.3.15.orig/pam_radius_auth.c
+++ pam_radius-1.3.15/pam_radius_auth.c
@@ -1,6 +1,4 @@
 /*
- * $Id: pam_radius_auth.c,v 1.27 2002/05/06 14:18:34 aland Exp $
- * pam_radius_auth
  *      Authenticate a user via a RADIUS session
  *
  * 0.9.0 - Didn't compile quite right.
@@ -42,6 +40,13 @@
 
 #include "pam_radius_auth.h"
 
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <net/if.h>
+#include <sys/ioctl.h>
+
+#include <gsp_auth.h>
+
 /* internal data */
 static CONST char *pam_module_name = "pam_radius_auth";
 static char conf_file[BUFFER_SIZE]; /* configuration file */
@@ -50,9 +55,29 @@ static char conf_file[BUFFER_SIZE]; /* c
  * when close_session will be called we won't be root anymore and
  * won't be able to access again the radius server configuration file
  * -- cristiang */
-static radius_server_t *live_server = NULL;
+//static radius_server_t *live_server = NULL;
+static char valid_live_server = 0;
+static radius_server_t live_server = {NULL, {0}, 0, NULL, NULL, 0, 0, 0};
 static time_t session_time;
 
+static void copy_server_info (radius_server_t *dest, radius_server_t *orig)
+{
+  dest->next = NULL;
+  dest->ip.s_addr = orig->ip.s_addr;
+  dest->port = orig->port;
+  if (dest->hostname) {
+	free (dest->hostname);
+  }
+  dest->hostname = strdup(orig->hostname);
+  if (dest->secret) {
+	free (dest->secret);
+  }
+  dest->secret = strdup(orig->secret);
+  dest->timeout = orig->timeout;
+  dest->accounting = orig->accounting;
+  dest->tries = orig->tries;
+}
+
 /* logging */
 static void _pam_log(int err, CONST char *format, ...)
 {
@@ -73,6 +98,7 @@ static int _pam_parse(int argc, CONST ch
 
   memset(conf, 0, sizeof(radius_conf_t)); /* ensure it's initialized */
 
+  conf->retries = 3;
   strcpy(conf_file, CONF_FILE);
   
   /*
@@ -100,9 +126,9 @@ static int _pam_parse(int argc, CONST ch
 
     } else if (!strncmp(*argv,"retry=",6)) {
       int i = atoi(*argv+6);
-      i &= 0x03;		/* keep the low 3 bits only */
-      ctrl |= (i << 4);
-
+      if (i > 1 && i <= 10) {
+        conf->retries = i;
+      }
     } else if (!strncmp(*argv, "client_id=", 10)) {
       if (conf->client_id) {
 	_pam_log(LOG_WARNING, "ignoring duplicate '%s'", *argv);
@@ -116,6 +142,9 @@ static int _pam_parse(int argc, CONST ch
       ctrl |= PAM_DEBUG_ARG;
       conf->debug = 1;
       
+    } else if (!strcmp(*argv, "radius2factor")) {
+      ctrl |= PAM_RADIUS_TWO_FACTOR;
+      
     } else {
       _pam_log(LOG_WARNING, "unrecognized option '%s'", *argv);
     }
@@ -410,12 +439,17 @@ verify_packet(char *secret, AUTH_HDR *re
  * is *always* kept in network byte order.
  */
 static attribute_t *
-find_attribute(AUTH_HDR *response, unsigned char type)
+find_attribute(AUTH_HDR *response, unsigned char type, attribute_t *attr)
 {
-  attribute_t *attr = (attribute_t *) &response->data;
-
   int len = ntohs(response->length) - AUTH_HDR_LEN;
 
+  if (attr == NULL) {
+    attr = (attribute_t *) &response->data;
+  } else {
+    attr = (attribute_t *) ((char *) attr + attr->length);
+    len -= (char *)attr - (char *)&response->data;
+  }
+
   while (attr->attribute != type) {
     if ((len -= attr->length) <= 0) {
       return NULL;		/* not found */
@@ -427,6 +461,66 @@ find_attribute(AUTH_HDR *response, unsig
 }
 
 /*
+ * Find group authorization = FRAMED-FILTER-ID in a RADIUS packet.
+ * Possible syntax for this attribute:
+ *      'group_name=<group1>[,<group2>];'
+ *      '<group1>[,<group2>][;]'
+ * The value can be split in more than one FRAMED-FILTER-ID attribute.
+ * This routine will add ',' as the separator between attributes when
+ * it is not present.
+ */
+static char * find_group_name(AUTH_HDR *response)
+{
+	attribute_t * attr = NULL;
+	char *group, *aux, *aux1;
+	int len,lfree;
+
+	if ((attr = find_attribute(response, PW_FRAMED_FILTER_ID, NULL)) == NULL) {
+		return NULL; // none attribute FRAMED-FILTER-ID;
+	}
+
+	group = calloc(1,2048);
+	lfree = 2048;
+
+	while (attr && (lfree > 0)) {
+		if (attr->length-2) {
+			// copy data to group
+			aux = attr->data;
+			if ((aux1=strstr(aux,"group_name")) &&
+			     (((int)aux1 - (int) aux) < (attr->length-2))) {
+				aux1 += 10;
+				while (isblank(*aux1) && *aux1) aux1++;
+				if (*aux1 == '=') {
+					aux = aux1+1;
+				} else {
+					aux = NULL;
+				}
+			}
+			while (*aux && isblank(*aux)) aux++;
+			if (aux && *aux) {
+				len = attr->length - 2 -((int)aux - (int)attr->data);
+				if ((len > 0) && (lfree > len)) {
+					aux1 = attr->data + attr->length-3;
+					if (*aux1 == ';') {
+						len--;
+					}
+					strncat(group,aux,len);
+					lfree -= len;
+					if (*aux1 != ',') {
+						strcat(group,",");
+						lfree--;
+					}
+				}
+			}
+
+		}
+		// get next attribute
+		attr = find_attribute(response, PW_FRAMED_FILTER_ID, attr);
+	}
+        return(group);
+}
+
+/*
  * Add an attribute to a RADIUS packet.
  */
 static void
@@ -487,7 +581,7 @@ add_password(AUTH_HDR *request, unsigned
   memset(hashed, '\0', length);
   memcpy(hashed, password, length);
 
-  attr = find_attribute(request, PW_PASSWORD);
+  attr = find_attribute(request, PW_PASSWORD, NULL);
 
   if (type == PW_PASSWORD) {
     vector = request->vector;
@@ -514,7 +608,7 @@ add_password(AUTH_HDR *request, unsigned
   }
 
   if (type == PW_OLD_PASSWORD) {
-    attr = find_attribute(request, PW_OLD_PASSWORD);
+    attr = find_attribute(request, PW_OLD_PASSWORD, NULL);
   }
   
   if (!attr) {
@@ -542,34 +636,49 @@ cleanup(radius_server_t *server)
  * allocate and open a local port for communication with the RADIUS
  * server
  */
+//[RK]Jun/02/05 - Group Authorization Support - removed get_str
 static int
-initialize(radius_conf_t *conf, int accounting)
+initialize(radius_conf_t *conf, int accounting, int port)
 {
   struct sockaddr salocal;
   u_short local_port;
   char hostname[BUFFER_SIZE];
   char secret[BUFFER_SIZE];
-  
+  char srv_type[BUFFER_SIZE];
   char buffer[BUFFER_SIZE];
   char *p;
   FILE *fserver;
   radius_server_t *server = NULL;
   struct sockaddr_in * s_in;
-  int timeout;
+  int timeout, tries;
   int line = 0;
+  radius_server_t *tmp;
+
+    /* the first time around, read the configuration file */
+    if ((fserver = fopen (conf_file, "r")) == (FILE*)NULL) {
+      _pam_log(LOG_ERR, "Could not open configuration file %s: %s\n",
+	      conf_file, strerror(errno));
+      if (valid_live_server) {
+	_pam_log(LOG_ERR, "Using live_server %s\n", live_server.hostname);
+	conf->server = malloc(sizeof(radius_server_t));
+	if (conf->server) {
+	  memset(conf->server, 0, sizeof(radius_server_t));
+	  copy_server_info (conf->server, &live_server);
+	  goto using_live_server;
+	}
+	_pam_log(LOG_ERR, "Out of memory...\n");
+      }
+      return PAM_ABORT;
+    }
+  while (1) {
+      if (feof(fserver) ||
+	      fgets (buffer, sizeof(buffer), fserver) == (char*) NULL ||
+	      ferror(fserver)) {
+          break;
+      }
+      p = buffer;
 
-  /* the first time around, read the configuration file */
-  if ((fserver = fopen (conf_file, "r")) == (FILE*)NULL) {
-    _pam_log(LOG_ERR, "Could not open configuration file %s: %s\n",
-	    conf_file, strerror(errno));
-    return PAM_ABORT;
-  }
-  
-  while (!feof(fserver) &&
-	 (fgets (buffer, sizeof(buffer), fserver) != (char*) NULL) &&
-	 (!ferror(fserver))) {
     line++;
-    p = buffer;
 
     /*
      *  Skip blank lines and whitespace
@@ -586,12 +695,22 @@ initialize(radius_conf_t *conf, int acco
     }
     
     timeout = 3;
-    if (sscanf(p, "%s %s %d", hostname, secret, &timeout) < 2) {
+	tries = 0;
+	//[RK]Nov/13/02 Bug#31 - add serial port number
+    if (sscanf(p, "%s %s %s %d %d", srv_type, hostname, secret, &timeout,
+		&tries) < 5) {
       _pam_log(LOG_ERR, "ERROR reading %s, line %d: Could not read hostname or secret\n",
 	       conf_file, line);
       continue; /* invalid line */
     } else {			/* read it in and save the data */
-      radius_server_t *tmp;
+		if ((accounting) && (strncmp(srv_type, "auth", 4) == 0)) {
+			continue;
+		}
+
+		if ((!accounting) && (strncmp(srv_type, "acct", 4) == 0)) {
+			continue;
+		}
+
       
       tmp = malloc(sizeof(radius_server_t));
       if (server) {
@@ -607,6 +726,8 @@ initialize(radius_conf_t *conf, int acco
       server->secret = strdup(secret);
       server->accounting = accounting;
       server->port = 0;
+      server->tries = tries;
+	server->nas_port = port;	//[RK]Nov/13/02 Bug#31 - add serial port number
 
       if ((timeout < 1) || (timeout > 60)) {
 	server->timeout = 3;
@@ -616,7 +737,7 @@ initialize(radius_conf_t *conf, int acco
       server->next = NULL;
     }
   }
-  fclose(fserver);
+    fclose(fserver);
   
   if (!server) {		/* no server found, die a horrible death */
     _pam_log(LOG_ERR, "No RADIUS server found in configuration file %s\n",
@@ -624,6 +745,7 @@ initialize(radius_conf_t *conf, int acco
     return PAM_AUTHINFO_UNAVAIL;
   }
   
+using_live_server:
   /* open a socket.  Dies if it fails */
   conf->sockfd = socket(AF_INET, SOCK_DGRAM, 0);
   if (conf->sockfd < 0) {
@@ -694,13 +816,38 @@ build_radius_packet(AUTH_HDR *request, C
   if ((conf->server->ip.s_addr == ntohl(0x7f000001)) || (!hostname[0])) {
     ipaddr = 0x7f000001;
   } else {
-    struct hostent *hp;
-    
-    if ((hp = gethostbyname(hostname)) == (struct hostent *) NULL) {
-      ipaddr = 0x00000000;	/* no client IP address */
-    } else {
-      ipaddr = ntohl(*(UINT4 *) hp->h_addr); /* use the first one available */
-    }
+// try to get IP address of the eth0
+//    struct hostent *hp;
+//    
+//    if ((hp = gethostbyname(hostname)) == (struct hostent *) NULL) {
+//      ipaddr = 0x00000000;	/* no client IP address */
+//    } else {
+//      ipaddr = ntohl(*(UINT4 *) hp->h_addr); /* use the first one available */
+//    }
+	int fd_aux;
+	struct ifreq ifr;
+	struct sockaddr_in * sin;
+	fd_aux = socket(AF_INET,SOCK_STREAM,0);
+	strcpy(ifr.ifr_name,"eth0");
+	ifr.ifr_addr.sa_family = AF_INET;
+	//[RK]Mar/16/06 - fixed problem with bonding Bug#6730
+	if (ioctl(fd_aux,SIOCGIFADDR,&ifr) == -1) {
+		strcpy(ifr.ifr_name,"bond0");
+		ifr.ifr_addr.sa_family = AF_INET;
+		if (ioctl(fd_aux,SIOCGIFADDR,&ifr) == -1) {
+			sin = NULL;
+		} else {
+			sin = (struct sockaddr_in *) &ifr.ifr_addr;
+		}
+	} else {
+		sin = (struct sockaddr_in *) &ifr.ifr_addr;
+	}
+	if (sin) {
+		ipaddr = (unsigned long)sin->sin_addr.s_addr; 
+	} else {
+    		ipaddr = 0;
+	}
+	close (fd_aux);
   }
 
   /* If we can't find an IP address, then don't add one */
@@ -709,18 +856,26 @@ build_radius_packet(AUTH_HDR *request, C
   }
 
   /* There's always a NAS identifier */
-  if (conf->client_id && *conf->client_id) {
-    add_attribute(request, PW_NAS_IDENTIFIER, conf->client_id,
-		  strlen(conf->client_id));
-  }
+	//[RK]Nov/13/02 Bug#31 - NAS identifier is the hostname 
+//  if (conf->client_id && *conf->client_id) {
+//    add_attribute(request, PW_NAS_IDENTIFIER, conf->client_id,
+//		  strlen(conf->client_id));
+//  }
+	add_attribute(request, PW_NAS_IDENTIFIER, hostname, strlen(hostname));
 
   /*
    *  Add in the port (pid) and port type (virtual).
    *
    *  We might want to give the TTY name here, too.
    */
-  add_int_attribute(request, PW_NAS_PORT_ID, getpid());
-  add_int_attribute(request, PW_NAS_PORT_TYPE, PW_NAS_PORT_TYPE_VIRTUAL);
+	//[RK]Nov/13/02 Bug#31 - NAS_PORT_ID is the serial port number and the type is async.
+	if (conf->server->nas_port) {
+		add_int_attribute(request, PW_NAS_PORT_ID, conf->server->nas_port);
+		add_int_attribute(request, PW_NAS_PORT_TYPE, PW_NAS_PORT_TYPE_ASYNC);
+	} else {
+		add_int_attribute(request, PW_NAS_PORT_ID, getpid());
+		add_int_attribute(request, PW_NAS_PORT_TYPE, PW_NAS_PORT_TYPE_VIRTUAL);
+	}
 }
 
 /*
@@ -741,6 +896,7 @@ talk_radius(radius_conf_t *conf, AUTH_HD
   radius_server_t *server = conf->server;
   int ok;
   int server_tries;
+  int retval = PAM_AUTHINFO_UNAVAIL;
 
   /* ************************************************************ */
   /* Now that we're done building the request, we can send it */
@@ -778,6 +934,8 @@ talk_radius(radius_conf_t *conf, AUTH_HD
     }
 
     server_tries = tries;
+	if (tries > 1 && server->tries) server_tries = server->tries;
+
 send:
     /* send the packet */
     if (sendto(conf->sockfd, (char *) request, total_length, 0,
@@ -899,6 +1057,11 @@ send:
 	      ok = FALSE;
 	    break;
 	  }
+  	  if (response->code == PW_AUTHENTICATION_REJECT) {
+	      ok = FALSE;
+		retval = PAM_AUTH_ERR;
+	    break;
+	  }
 	}
 	
 	/*
@@ -947,12 +1110,17 @@ send:
       /* we've found one that does respond, forget about the other servers */
       cleanup(server->next);
       server->next = NULL;
-      live_server = server;	/* we've got a live one! */
+//      live_server = server;	/* we've got a live one! */
+      copy_server_info (&live_server, server);
+      valid_live_server = 1;
       break;
     }
   }
 
   if (!server) {
+	if (retval != PAM_AUTHINFO_UNAVAIL) {
+		return retval;
+	}
     _pam_log(LOG_ERR, "All RADIUS servers failed to respond.");
     return PAM_AUTHINFO_UNAVAIL;
   }
@@ -982,7 +1150,7 @@ static int rad_converse(pam_handle_t *pa
   msg[0] = &resp_msg;
   
   /* grab the password */
-  retval = pam_get_item(pamh, PAM_CONV, (CONST void **) &conv);
+  retval = pam_get_item(pamh, PAM_CONV, (CONST void **)(void *) &conv); //[GY] 2005/Sep/19  clean warning
   PAM_FAIL_CHECK;
   
   retval = conv->conv(1, msg, &resp,conv->appdata_ptr);
@@ -1025,18 +1193,22 @@ pam_sm_authenticate(pam_handle_t *pamh,i
   char *password = NULL;
   CONST char *rhost;
   char *resp2challenge = NULL;
-  int ctrl;
+  int ctrl, val;
   int retval = PAM_AUTH_ERR;
+  attribute_t *a_cb;
 
   char recv_buffer[4096];
   char send_buffer[4096];
   AUTH_HDR *request = (AUTH_HDR *) send_buffer;
   AUTH_HDR *response = (AUTH_HDR *) recv_buffer;
   radius_conf_t config;
-  int tries;
+  int tries = 1;
 
   ctrl = _pam_parse(argc, argv, &config);
-  tries = ((ctrl & PAM_RETRY) >> 4) + 1;
+
+  if (ctrl & PAM_RADIUS_TWO_FACTOR) {
+	  tries = 3;
+  }
 
   /* grab the user name */
   retval = pam_get_user(pamh, &user, NULL);
@@ -1059,7 +1231,7 @@ pam_sm_authenticate(pam_handle_t *pamh,i
    * Get the IP address of the authentication server
    * Then, open a socket, and bind it to a port
    */
-  retval = initialize(&config, FALSE);
+  retval = initialize(&config, FALSE, 0);
   PAM_FAIL_CHECK;
 
   /* 
@@ -1081,7 +1253,7 @@ pam_sm_authenticate(pam_handle_t *pamh,i
   request->id = request->vector[0]; /* this should be evenly distributed */
   
   /* grab the password (if any) from the previous authentication layer */
-  retval = pam_get_item(pamh, PAM_AUTHTOK, (CONST void **) &password);
+  retval = pam_get_item(pamh, PAM_AUTHTOK, (CONST void **)(void *) &password); //[GY] 2005/Sep/19  clean warning
   PAM_FAIL_CHECK;
 
   if(password) {
@@ -1089,6 +1261,13 @@ pam_sm_authenticate(pam_handle_t *pamh,i
     DPRINT(LOG_DEBUG, "Got password %s", password);
   }
 
+try_again:
+//  _pam_log(LOG_DEBUG, "$$$ RADIUS:tries %d $$$\n", tries);
+  if (ctrl & PAM_RADIUS_TWO_FACTOR) {
+	  _pam_forget(password);
+	  password = NULL;
+  }
+
   /* no previous password: maybe get one from the user */
   if (!password) {
     if (ctrl & PAM_USE_FIRST_PASS) {
@@ -1098,7 +1277,24 @@ pam_sm_authenticate(pam_handle_t *pamh,i
     
     /* check to see if we send a NULL password the first time around */
     if (!(ctrl & PAM_SKIP_PASSWD)) {
-      retval = rad_converse(pamh, PAM_PROMPT_ECHO_OFF, "Password: ", &password);
+		if (ctrl & PAM_RADIUS_TWO_FACTOR) {
+//          Uncomment this section and remove the last rad_converse(..."2nd Password: "...)
+//          in case you need to get Pin and OTP separately.
+
+//			char pin_otp[50];
+//			char *pin_otp_ptr;
+
+//			retval = rad_converse(pamh, PAM_PROMPT_ECHO_OFF, "Pin: ", &pin_otp_ptr);
+//			snprintf(pin_otp, 50, "%s", pin_otp_ptr);
+//			_pam_forget(pin_otp_ptr);
+//			retval = rad_converse(pamh, PAM_PROMPT_ECHO_OFF, "OTP: ", &pin_otp_ptr);
+//			strncat(pin_otp, pin_otp_ptr, 50-strlen(pin_otp));
+//			_pam_forget(pin_otp_ptr);
+
+//			password = strdup(pin_otp);
+			retval = rad_converse(pamh, PAM_PROMPT_ECHO_OFF, "2nd Password: ", &password);
+		} else
+			retval = rad_converse(pamh, PAM_PROMPT_ECHO_OFF, "Password: ", &password);
       PAM_FAIL_CHECK;
 
     }
@@ -1114,7 +1310,7 @@ pam_sm_authenticate(pam_handle_t *pamh,i
    *  Note that this is NOT the IP address of the machine running PAM!
    *  It's the IP address of the client.
    */
-  retval = pam_get_item(pamh, PAM_RHOST, (CONST void **) &rhost);
+  retval = pam_get_item(pamh, PAM_RHOST, (CONST void **)(void *) &rhost); //[GY] 2005/Sep/19  clean warning
   PAM_FAIL_CHECK;
   if (rhost) {
     add_attribute(request, PW_CALLING_STATION_ID, rhost, strlen(rhost));
@@ -1122,7 +1318,7 @@ pam_sm_authenticate(pam_handle_t *pamh,i
 
   DPRINT(LOG_DEBUG, "Sending RADIUS request code %d", request->code);
 
-  retval = talk_radius(&config, request, response, password, NULL, tries);
+  retval = talk_radius(&config, request, response, password, NULL, config.retries);
   PAM_FAIL_CHECK;
 
   DPRINT(LOG_DEBUG, "Got RADIUS response code %d", response->code);
@@ -1139,18 +1335,18 @@ pam_sm_authenticate(pam_handle_t *pamh,i
     char challenge[BUFFER_SIZE];
     
     /* Now we do a bit more work: challenge the user, and get a response */
-    if (((a_state = find_attribute(response, PW_STATE)) == NULL) ||
-	((a_reply = find_attribute(response, PW_REPLY_MESSAGE)) == NULL)) {
+    if (((a_state = find_attribute(response, PW_STATE, NULL)) == NULL) ||
+	((a_reply = find_attribute(response, PW_REPLY_MESSAGE, NULL)) == NULL)) {
       _pam_log(LOG_ERR, "RADIUS access-challenge received with State or Reply-Message missing");
       retval = PAM_AUTHINFO_UNAVAIL;
       goto error;
     }
-    
+
     memcpy(challenge, a_reply->data, a_reply->length - 2);
     challenge[a_reply->length - 2] = 0;
     
     /* It's full challenge-response, we might as well have echo on */
-    retval = rad_converse(pamh, PAM_PROMPT_ECHO_ON, challenge, &resp2challenge);
+    retval = rad_converse(pamh, PAM_PROMPT_ECHO_OFF, challenge, &resp2challenge);
 
     /* now that we've got a response, build a new radius packet */
     build_radius_packet(request, user, resp2challenge, &config);
@@ -1169,14 +1365,48 @@ pam_sm_authenticate(pam_handle_t *pamh,i
   /* Whew! Done the pasword checks, look for an authentication acknowledge */
   if (response->code == PW_AUTHENTICATION_ACK) {
     retval = PAM_SUCCESS;
+    	if((a_cb = find_attribute(response, PW_USER_SERVICE_TYPE, NULL)) != NULL) {
+		memcpy (&val, a_cb->data, sizeof(val));
+		val = ntohl(val);
+	}
+	//Group Authorization Support
+	a_cb = NULL;
+	{
+		char * group=NULL;
+		if ((group=find_group_name(response)) != NULL) { 
+			struct sid_data sdata;
+			enum sid_status ret;
+					
+			gsp_auth_pam_get_sid(pamh, &sdata);
+			ret = gsp_auth_session_sdata_check(&sdata);
+			if (ret == GSP_AUTH_SID_VALID) {
+				gsp_auth_session_set_group_name(&sdata, group);
+			}
+			free(group);
+		}	
+	}
+	a_cb = NULL;
+	while ((a_cb=find_attribute(response, PW_NAS_PORT_ID, a_cb)) != NULL) {
+		memcpy(&val, a_cb->data, sizeof(val));
+		val = ntohl(val);
+		//DPRINT(LOG_DEBUG, "Got RADIUS NAS_Port_Id %d", val);
+		if (val == config.server->nas_port) {
+    		retval = PAM_SUCCESS;
+			break;
+		}
+    	retval = PAM_AUTH_ERR;	/* authentication failure */
+	}
   } else {
-    retval = PAM_AUTH_ERR;	/* authentication failure */
+	  if (--tries)
+		  goto try_again;
+	  else
+		  retval = PAM_AUTH_ERR;	/* authentication failure */
+  }
 
-  error:
-    /* If there was a password pass it to the next layer */
-    if (password && *password) {
-      pam_set_item(pamh, PAM_AUTHTOK, password);
-    }
+error:
+  /* If there was a password pass it to the next layer */
+  if (password && *password) {
+    pam_set_item(pamh, PAM_AUTHTOK, password);
   }
 
   if (ctrl & PAM_DEBUG_ARG) {
@@ -1209,7 +1439,7 @@ pam_sm_setcred(pam_handle_t *pamh,int fl
 
   retval = PAM_SUCCESS;
   pret = &retval;
-  pam_get_data( pamh, "rad_setcred_return", (CONST void **) &pret );
+  pam_get_data( pamh, "rad_setcred_return", (CONST void **)(void *) &pret ); //[GY] 2005/Sep/19  clean warning
   return *pret;
 }
 
@@ -1247,7 +1477,7 @@ pam_private_session(pam_handle_t *pamh, 
    * Get the IP address of the authentication server
    * Then, open a socket, and bind it to a port
    */
-  retval = initialize(&config, TRUE);
+  retval = initialize(&config, TRUE, 0);
   PAM_FAIL_CHECK;
 
   /* 
@@ -1353,7 +1583,7 @@ pam_sm_chauthtok(pam_handle_t *pamh, int
    * Get the IP address of the authentication server
    * Then, open a socket, and bind it to a port
    */
-  retval = initialize(&config, FALSE);
+  retval = initialize(&config, FALSE, 0);
   PAM_FAIL_CHECK;
 
   /* 
@@ -1370,12 +1600,12 @@ pam_sm_chauthtok(pam_handle_t *pamh, int
 #define PAM_FAIL_CHECK if (retval != PAM_SUCCESS) {goto error; }
 
   /* grab the old password (if any) from the previous password layer */
-  retval = pam_get_item(pamh, PAM_OLDAUTHTOK, (CONST void **) &password);
+  retval = pam_get_item(pamh, PAM_OLDAUTHTOK, (CONST void **)(void *) &password); //[GY] 2005/Sep/19  clean warning
   PAM_FAIL_CHECK;
   if(password) password = strdup(password);
 
   /* grab the new password (if any) from the previous password layer */
-  retval = pam_get_item(pamh, PAM_AUTHTOK, (CONST void **) &new_password);
+  retval = pam_get_item(pamh, PAM_AUTHTOK, (CONST void **)(void *) &new_password); //[GY] 2005/Sep/19  clean warning
   PAM_FAIL_CHECK;
   if(new_password) new_password = strdup(new_password);
 
@@ -1545,6 +1775,12 @@ pam_sm_chauthtok(pam_handle_t *pamh, int
   return retval;
 }
 
+PAM_EXTERN int
+pam_sm_acct_mgmt(pam_handle_t *pamh, int flags, int argc, const char **argv)
+{
+  return(PAM_SUCCESS);
+}
+ 
 #ifdef PAM_STATIC
 
 /* static module data */
Index: pam_radius-1.3.15/pam_radius_auth.conf
===================================================================
--- pam_radius-1.3.15.orig/pam_radius_auth.conf
+++ pam_radius-1.3.15/pam_radius_auth.conf
@@ -1,32 +1,41 @@
-#  pam_radius_auth configuration file.  Copy to: /etc/raddb/server
-#
 #  For proper security, this file SHOULD have permissions 0600,
 #  that is readable by root, and NO ONE else.  If anyone other than
 #  root can read this file, then they can spoof responses from the server!
 #
-#  There are 3 fields per line in this file.  There may be multiple
+#  There are 5 fields per line in this file.  There may be multiple
 #  lines.  Blank lines or lines beginning with '#' are treated as
 #  comments, and are ignored.  The fields are:
 #
-#  server[:port] secret [timeout]
+#  serverType server[:port] secret timeout retries
+#
+#  - the serverType specifies which type of the server :
+#    authentication server or accounting server. 
+#    Valid entries are:  "acct" and "auth".
+# 
+#  - the server is the IP address or hostname of the RADIUS server.
+#
+#  - the port name or number is optional.  The default port name is
+#  "radius", and is looked up from /etc/services.
+#
+#  - secret: The shared password required for communication with the 
+#  Radius server.
 #
-#  the port name or number is optional.  The default port name is
-#  "radius", and is looked up from /etc/services The timeout field is
-#  optional.  The default timeout is 3 seconds.
+#  - the timeout field controls how many seconds the module waits before
+#  deciding that the server has failed to respond. Default : 3 sec.
+#
+#  - the retries : the number of times each Radius server is tried
+#  before another is contacted.
 #
 #  If multiple RADIUS server lines exist, they are tried in order.  The
 #  first server to return success or failure causes the module to return
 #  success or failure.  Only if a server fails to response is it skipped,
 #  and the next server in turn is used.
 #
-#  The timeout field controls how many seconds the module waits before
-#  deciding that the server has failed to respond.
 #
-# server[:port]	shared_secret      timeout (s)
-127.0.0.1	secret             1
-other-server    other-secret       3
+# serverType  server[:port] shared_secret timeout retries
+  auth        127.0.0.1	    secret        3       2
+  acct        127.0.0.1     secret        3       2
+
+# auth        other-server  other-secret  3       1
+# acct        other-server  other-secret  3       1
 
-#
-# having localhost in your radius configuration is a Good Thing.
-#
-# See the INSTALL file for pam.conf hints.
Index: pam_radius-1.3.15/pam_radius_auth.h
===================================================================
--- pam_radius-1.3.15.orig/pam_radius_auth.h
+++ pam_radius-1.3.15/pam_radius_auth.h
@@ -42,6 +42,8 @@ typedef struct radius_server_t {
   char *secret;
   int timeout;
   int accounting;
+  int tries;
+	int nas_port;	//[RK]Nov/13/02 - Bug#31 - add serial port number
 } radius_server_t;
 
 typedef struct radius_conf_t {
@@ -82,14 +84,15 @@ typedef struct radius_conf_t {
 #define PAM_SKIP_PASSWD    2
 #define PAM_USE_FIRST_PASS 4
 #define PAM_TRY_FIRST_PASS 8
+#define PAM_RADIUS_TWO_FACTOR 16
 
 #define PAM_RETRY          0x30
 
 /* Module defines */
 #ifndef BUFFER_SIZE
 #define BUFFER_SIZE      1024
-#endif BUFFER_SIZE
-#define MAXPWNAM 20     /* maximum user name length. Server dependent,
+#endif /* BUFFER_SIZE */
+#define MAXPWNAM 64     /* maximum user name length. Server dependent,
                          * this is the default value
                          */
 #define MAXPASS 128     /* max password length. Again, depends on server
Index: pam_radius-1.3.15/radius.h
===================================================================
--- pam_radius-1.3.15.orig/radius.h
+++ pam_radius-1.3.15/radius.h
@@ -151,6 +151,7 @@ typedef struct pw_auth_hdr {
 #define	PW_BROADCAST_LISTEN		3
 
 /*	NAS PORT TYPES */
+#define PW_NAS_PORT_TYPE_ASYNC		0
 #define PW_NAS_PORT_TYPE_VIRTUAL	5
 
 /*	FRAMED COMPRESSION TYPES	*/
