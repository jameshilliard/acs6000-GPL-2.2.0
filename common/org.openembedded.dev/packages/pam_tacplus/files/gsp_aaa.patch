Index: pam_tacplus/libtac/lib/author_r.c
===================================================================
--- pam_tacplus.orig/libtac/lib/author_r.c	2000-02-02 11:42:03.000000000 -0800
+++ pam_tacplus/libtac/lib/author_r.c	2007-10-16 16:32:58.000000000 -0700
@@ -12,6 +12,10 @@
 #include <netinet/in.h>
 #include <string.h>
 
+// [GY] 2005/aug/25  clean warnings
+#include <unistd.h>
+#include <stdlib.h>
+
 #include "tacplus.h"
 #include "xalloc.h"
 #include "libtac.h"
@@ -27,7 +31,7 @@
 */
 void tac_author_read(int fd, struct areply *re) {
 	HDR th;
-	struct author_reply *tb;
+	struct author_reply *tb=NULL;    //[GY] 2005/Aug,31  clean warnings
 	int len_from_header, r, len_from_body;
 	char *pktp;
 	char *msg = NULL;
@@ -136,19 +140,22 @@
 				   pktp holds current argument length */
 				for(r=0; r < tb->arg_cnt; r++) {
 					char buff[256];
-					char name[128];
-					char content[128];
+// [GY] 2005/aug/25  clean warnings	char name[128];
+// [GY] 2005/aug/25  clean warnings	char content[128];
 					char *sep;
-					char *attrib;
+// [GY] 2005/aug/25  clean warnings	char *attrib;
 					char *value;
 					
 					bcopy(argp, buff, *pktp);
-					buff[*pktp] = '\0';
+					buff[(int)*pktp] = '\0';
 					sep=index(buff, '=');
 					if(sep == NULL)
+                                                        /* [GY] 2005/Sep/5  sep variable wasn't set by index
+							sep=index(buff, '*');
+                                                        */
 							index(buff, '*');
 					if(sep == NULL)
-							syslog(LOG_WARNING, "%s: attribute contains no separator: %s", buff);
+							syslog(LOG_WARNING, "%s: attribute contains no separator: %s", __FUNCTION__, buff);   //[GY] 2005,aug,29  clean warnings
 					*sep = '\0';
 					value = ++sep;
 					/* now buff points to attribute name,
Index: pam_tacplus/libtac/lib/connect.c
===================================================================
--- pam_tacplus.orig/libtac/lib/connect.c	2000-02-02 11:31:17.000000000 -0800
+++ pam_tacplus/libtac/lib/connect.c	2007-10-16 16:43:56.000000000 -0700
@@ -12,10 +12,59 @@
 #include <syslog.h>
 #include <stdlib.h>
 #include <signal.h>
+#include <unistd.h>
+#include <errno.h>
 
 #include "tacplus.h"
 #include "libtac.h"
 
+// [GY]  2005/aug/25  clean warnings
+#include <string.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+
+#define        GOT_SIGALRM      14 
+
+#include "../../support.h"  //[GY] 2005/Aug/31  clean warnings
+
+int got_sig;
+extern int tac_timeout;
+extern int tac_retries;
+
+void unblock(int sig)
+{
+	sigset_t set;
+
+	sigemptyset(&set);
+	sigaddset(&set, sig);
+	sigprocmask(SIG_UNBLOCK, &set, NULL);
+}
+
+void treatSignals( int sig ) {
+	struct sigaction act;
+	memset((char*)&act,0,sizeof(struct sigaction));
+	switch (sig) {
+		case SIGALRM:
+			got_sig |= GOT_SIGALRM;
+			break;
+	}
+}
+
+void setSignals() 
+{
+	struct sigaction act;
+
+	memset((char*)&act,0,sizeof(struct sigaction));
+	
+	// Setting up the act structure
+	act.sa_handler = treatSignals;
+	sigemptyset(&act.sa_mask);
+	act.sa_flags = 0;
+	
+	sigaction(SIGALRM, &act, 0);
+	unblock(SIGALRM);
+} 
+
 /* Returns file descriptor of open connection
    to the first available server from list passed
    in server table.
@@ -24,19 +73,20 @@
 	struct sockaddr_in serv_addr;
 	struct servent *s;
 	int fd;
-	int tries = 0;
+	int tries = 0,nro_tries=0; //nro_tries = # tries to connect
+							   //tries = # server begin connect
 
 	if(!servers) {
 		syslog(LOG_ERR, "%s: no TACACS+ servers defined", __FUNCTION__);
 		return(-1);
 	}
 
+	setSignals();
 	while(tries < servers) {	
 
  		bzero( (char *) &serv_addr, sizeof(serv_addr));
 		serv_addr.sin_family = AF_INET;
 		serv_addr.sin_addr.s_addr = server[tries];
-
 		s=getservbyname("tacacs", "tcp");
 		if(s == NULL) 
 			serv_addr.sin_port = htons(TAC_PLUS_PORT);
@@ -45,31 +95,46 @@
 
 		if((fd=socket(AF_INET, SOCK_STREAM, 0)) < 0) {
        	   		syslog(LOG_WARNING, 
-				"%s: socket creation error for %s: %m", __FUNCTION__,
-							inet_ntoa(server[tries]));
+				"%s: socket creation error for %s: %m", __FUNCTION__, \
+							xinet_ntoa(server[tries]));
 			tries++;
 			continue;
 		}
-
-		if(connect(fd, (struct sockaddr *) &serv_addr, 
-						sizeof(serv_addr)) < 0)
-    		{
-     	  		syslog(LOG_WARNING, 
-				"%s: connection to %s failed: %m", __FUNCTION__,
-						inet_ntoa(server[tries]));
-			tries++;
-			continue;
-    		}
-
-		/* connected ok */
-		TACDEBUG((LOG_DEBUG, "%s: connected to %s", __FUNCTION__, \
-			       	inet_ntoa(server[tries])));
-
-		return(fd);
+	 	do {
+			alarm(tac_timeout);
+			if(connect(fd, (struct sockaddr *) &serv_addr, 
+							sizeof(serv_addr)) < 0)
+    			{
+    				if(errno==EINTR) {
+						if(got_sig==SIGALRM) {
+     	  					syslog(LOG_WARNING, 
+							"%s: connection to %s failed: Connection timed out", \
+								__FUNCTION__, xinet_ntoa(server[tries]));
+						}
+	    			}
+    				else { 
+     	  			syslog(LOG_WARNING, 
+					"%s: connection to %s failed: %m", __FUNCTION__, \
+							xinet_ntoa(server[tries]));
+					}
+				nro_tries++;
+	    		}
+			else {
+			/* connected ok */
+			alarm(0);
+			TACDEBUG((LOG_DEBUG, "%s: connected to %s", __FUNCTION__, \
+			       	xinet_ntoa(server[tries])));
+
+			return(fd);
+			}
+		} while (nro_tries < tac_retries);
+		tries++;
 	}
 
 	/* all attempts failed */
 	syslog(LOG_ERR, "%s: all possible TACACS+ servers failed", __FUNCTION__); 
+	// disable the alarm
+	alarm(0);
 	return(-1);
 
 } /* tac_connect */
Index: pam_tacplus/libtac/lib/header.c
===================================================================
--- pam_tacplus.orig/libtac/lib/header.c	2000-02-02 11:31:36.000000000 -0800
+++ pam_tacplus/libtac/lib/header.c	2007-10-16 16:32:58.000000000 -0700
@@ -11,6 +11,7 @@
 #include "libtac.h"
 #include "xalloc.h"
 #include "magic.h"
+#include <netinet/in.h>   // [GY] 2005/aug/25  clean warnings
 
 /* Miscellaneous variables that are global, because we need
  * store their values between different functions and connections.
@@ -22,7 +23,7 @@
 int tac_encryption;
 
 /* Pointer to TACACS+ shared secret string. */
-char *tac_secret;
+char *tac_secret = 0;
 
 /* Returns pre-filled TACACS+ packet header of given type.
  * 1. you MUST fill th->datalength and th->version
Index: pam_tacplus/libtac/lib/Makefile
===================================================================
--- pam_tacplus.orig/libtac/lib/Makefile	2007-10-16 16:32:57.000000000 -0700
+++ pam_tacplus/libtac/lib/Makefile	2007-10-16 16:32:58.000000000 -0700
@@ -1,8 +1,7 @@
 #CC = gcc
 #AR = ar
 #DEBUG = -ggdb3 #-DDEBUGTAC
-DEBUG = -s -O 
-CFLAGS = -pipe -fPIC -I../include $(DEBUG)
+CFLAGS += -fPIC -I../include
 LIBRARY = libtac.a
 
 LIBSRCS = 	connect.c \
Index: pam_tacplus/Makefile
===================================================================
--- pam_tacplus.orig/Makefile	1999-02-05 08:28:44.000000000 -0800
+++ pam_tacplus/Makefile	2007-10-16 16:32:58.000000000 -0700
@@ -1,16 +1,12 @@
-OPTIM=-ggdb3
-#OPTIM=-O -s -m486
 LIBTAC=./libtac
-CFLAGS=-pipe -fPIC -I$(LIBTAC)/include $(OPTIM)
-#DEBUG1=-lmpr -L/home/kravietz/C/mpr-1.8 
-#DEBUG2=-lefence
-LIBS=-lpam -ldl -ltac -L$(LIBTAC)/lib $(DEBUG1) $(DEBUG2)
+CFLAGS+=-fPIC -I$(LIBTAC)/include `pkg-config --cflags glib-2.0`
+LDFLAGS+=-ldl -ltac -L$(LIBTAC)/lib -lgsp_tsapi -lgsp_auth -lcyc
 OBJ= support.o pam_tacplus.o
 
 all: pam_tacplus.so
 
 pam_tacplus.so: $(OBJ) Makefile $(LIBTAC)/lib/libtac.a
-	$(CC) -shared $(OPTIM) -Xlinker -x -o pam_tacplus.so $(OBJ) $(LIBS)
+	$(CC) -shared $(OPTIM) -Xlinker -x -o pam_tacplus.so $(OBJ) $(LDFLAGS)
 
 $(LIBTAC)/lib/libtac.a:
 	make -C libtac
Index: pam_tacplus/pam_tacplus.c
===================================================================
--- pam_tacplus.orig/pam_tacplus.c	2000-02-02 11:38:36.000000000 -0800
+++ pam_tacplus/pam_tacplus.c	2007-10-16 16:32:58.000000000 -0700
@@ -4,12 +4,21 @@
  *
  * See end of this file for copyright information.
  * See file `CHANGES' for revision history.
- */
+ */	
+#include <unistd.h>
+#include <netinet/in.h> //for in_addr
+#include <arpa/inet.h>  //for inet_ntoa and inet_addr
+#include <netdb.h>      //for NETDB res functions
+#include <sys/types.h>  //for gethostbyname
+
 
 #include <stdlib.h>		/* malloc */
 #include <syslog.h>
 #include <netdb.h>		/* gethostbyname */
 #include <sys/socket.h>		/* in_addr */
+#include <sys/ioctl.h>   //[GY]2006/Jan/24  Group_Auth_Box
+#include <net/if.h>      //[GY]2006/Jan/24  Group_Auth_Box
+
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <stdarg.h>		/* va_ */
@@ -17,6 +26,11 @@
 #include <string.h> /* strdup */
 #include <unistd.h>
 
+// [GY] 2005/aug/25  clean warnings
+#include <stdio.h>
+#include <ctype.h>
+#include <time.h>
+
 #include "tacplus.h"
 #include "libtac.h"
 #include "pam_tacplus.h"
@@ -29,12 +43,22 @@
 
 #include <security/pam_modules.h>
 
+/* GSP AAA headers [EL] */
+#include <cyc.h>
+#include <gsp_auth.h>
+#include <gsp_acl.h>
+#include <gsp-tsapi/gsp_tsapi_port.h>
+/* End GSP AAA headers */
+
+// [GY] 2005/Aug/31  clean warnings
+PAM_EXTERN int _pam_account(pam_handle_t *pamh, int argc, const char **argv,  int type);
+int _pam_send_account(int tac_fd, int type, char *user, char *tty);
+
 /* support.c */
 extern u_long tac_srv[TAC_MAX_SERVERS];
 extern int tac_srv_no;
 extern char *tac_service;
 extern char *tac_protocol;
-extern int _pam_parse (int argc, const char **argv);
 extern unsigned long _getserveraddr (char *serv);
 extern int tacacs_get_password (pam_handle_t * pamh, int flags
 		     ,int ctrl, char **password);
@@ -58,7 +82,7 @@
  * pair is valid 
  */
 PAM_EXTERN 
-pam_sm_authenticate (pam_handle_t * pamh, int flags,
+int pam_sm_authenticate (pam_handle_t * pamh, int flags,
 		     int argc, const char **argv)
 {
   int ctrl, retval;
@@ -67,17 +91,21 @@
   char *tty;
   int srv_i;
   int tac_fd;
-  int status = PAM_AUTH_ERR;
+  int status = PAM_AUTHINFO_UNAVAIL;
+  char *prompt = NULL;
 
   user = pass = tty = NULL;
 
-  ctrl = _pam_parse (argc, argv);
+  ctrl = _pam_parse (0,0, argc, argv);
 
   if (ctrl & PAM_TAC_DEBUG)
     syslog (LOG_DEBUG, "%s: called (pam_tacplus v%hu.%hu.%hu)"
 	, __FUNCTION__, PAM_TAC_VMAJ, PAM_TAC_VMIN, PAM_TAC_VPAT);
 
-  retval = pam_get_user (pamh, &user, "Username: ");
+  (void) pam_get_item(pamh,PAM_USER_PROMPT,(const void **)(void *)&prompt);    // [GY] 2005/Sep/19  clean warning
+  if (prompt == NULL) prompt = "username: ";
+  retval = pam_get_user(pamh, &user, prompt);
+
   if (retval != PAM_SUCCESS || user == NULL || *user == '\0')
     {
       _pam_log (LOG_ERR, "unable to obtain username");
@@ -106,12 +134,27 @@
 
   /* XXX uwzgledniac PAM_DISALLOW_NULL_AUTHTOK */
 
-  retval = tacacs_get_password (pamh, flags, ctrl, &pass);
+  /* grab the password (if any) from the previous authentication layer */
+  retval = pam_get_item(pamh, PAM_AUTHTOK, (const void **)&pass);    // [GY] 2005/Sep/19  clean warning
+
   if (retval != PAM_SUCCESS || pass == NULL || *pass == '\0')
-    {
+    pass = NULL;
+  else
+    pass = strdup(pass);
+
+  /* no previous password: maybe get one from the user */
+  if (!pass && (ctrl & PAM_USE_FIRST_PASS)) {
+    _pam_log(LOG_ERR, "unable to re-retrieve password from previous layer");
+    return PAM_AUTHINFO_UNAVAIL;
+  } /* end of password == NULL */
+
+  if (!pass) {
+    retval = tacacs_get_password (pamh, flags, ctrl, &pass);
+    if (retval != PAM_SUCCESS || pass == NULL || *pass == '\0') {
       _pam_log (LOG_ERR, "unable to obtain password");
       return PAM_CRED_INSUFFICIENT;
     }
+  }
 
   retval = pam_set_item (pamh, PAM_AUTHTOK, pass);
   if (retval != PAM_SUCCESS)
@@ -146,13 +189,13 @@
 	  if (srv_i == tac_srv_no-1) /* XXX check if OK */
 	    {			/* last server tried */
 	      _pam_log (LOG_ERR, "no more servers to connect");
-	      return PAM_AUTHINFO_UNAVAIL;
+	      return status;
 	    }
+		continue;
 	}
-      if (tac_authen_pap_send (tac_fd, user, pass, tty) < 0)
+      if (tac_authen_pap_send (tac_fd, (char *)user, pass, tty) < 0) //[GY] 2005/Sep/19  clean warning
 	{
 	  _pam_log (LOG_ERR, "error sending auth req to TACACS+ server");
-	  status = PAM_AUTHINFO_UNAVAIL;
 	}
       else
 	{
@@ -189,10 +232,12 @@
 
 /* no-op function to satisfy PAM authentication module */ 
 PAM_EXTERN 
-pam_sm_setcred (pam_handle_t * pamh, int flags,
+int pam_sm_setcred (pam_handle_t * pamh, int flags,
 		int argc, const char **argv)
 {
-  int ctrl = _pam_parse (argc, argv);
+  int ctrl;
+
+  ctrl = _pam_parse (0,0, argc, argv);
 
   if (ctrl & PAM_TAC_DEBUG)
     syslog (LOG_DEBUG, "%s: called (pam_tacplus v%hu.%hu.%hu)"
@@ -201,15 +246,72 @@
   return PAM_SUCCESS;
 }				/* pam_sm_setcred */
 
+static void tacplus_acl_add(struct sid_data *, int);
+
+static void tacplus_acl_add(struct sid_data *sid, int tty_num)
+{
+	struct gsp_acl_item acl;
+	struct sid_data tsapi_sdata;
+	gsp_tsapi_session_t *ts = NULL;
+	int conn_id = ERROR;
+	char *conn_id_str = NULL;
+	int ret;
+	char tty_str[11];
+
+	acl.perm.category = GSP_ACL_CATEGORY_ACCESS;
+	acl.perm.perm =
+		GSP_PERM_ACCESS_SESSION_RW|GSP_PERM_ACCESS_SESSION_POWER;
+	acl.res.type = GSP_ACL_RES_NODE;
+
+	/* Use TSAPI to get a connection ID from the tty number */
+	ret = gsp_auth_session_create(&tsapi_sdata);
+	if (ret == ERROR) return;
+
+	ret = gsp_tsapi_init_with_gspaaa_session(&ts, &tsapi_sdata);
+	if (ret != TS_OK) {
+		goto cleanup;
+	}
+                        
+	/* Crazy hack since type for tty str in TSAPI is a
+	 * string instead of an integer */
+	snprintf(tty_str, 10, "%d", tty_num);
+	tty_str[10] = '\0';
+
+	ret = gsp_psapi_get_port_serial_cas_star0_connectionId(ts,
+							       &conn_id_str,
+							       tty_str);
+	if (ret == TS_OK) {
+		conn_id = atoi(conn_id_str);
+		free(conn_id_str);
+		conn_id_str = NULL;
+	}
+
+	gsp_tsapi_destroy(ts);
+ cleanup:
+	gsp_auth_session_destroy(&tsapi_sdata);
+
+	if (conn_id != ERROR) {
+		if (conn_id == 0) {
+			snprintf(acl.res.res.node_path, GSP_NODE_PATH_SZ,
+				 "management.connection.serial.*.connect");
+		} else {
+			snprintf(acl.res.res.node_path, GSP_NODE_PATH_SZ,
+				 "management.connection.serial.%d.connect",
+				 conn_id);
+		}
+		gsp_auth_session_acl_add(sid, &acl);
+	}
+}
+
 /* authorizes user on remote TACACS+ server, i.e. checks
  * his permission to access requested service
  * returns PAM_SUCCESS if the service is allowed
  */
 PAM_EXTERN 
-pam_sm_acct_mgmt (pam_handle_t * pamh, int flags,
+int pam_sm_acct_mgmt (pam_handle_t * pamh, int flags,
 		  int argc, const char **argv)
 {
-  int retval, ctrl, status=PAM_AUTH_ERR;
+  int retval, ctrl, status=PAM_AUTH_ERR, rastatus=PAM_SUCCESS;
   char *user;
   char *tty;
   struct areply arep;
@@ -217,17 +319,25 @@
   int tac_fd;
   char *rhostname;
   u_long rhost = 0;
+  int tty_num=0, SIZE_HOSTNAME=256;
+  char *ptr,*ptr2, host_ip[SIZE_HOSTNAME], *IPADDRESS = NULL;  //[GY]2006/Jan/24  Group_Auth_Box
+  char  HOSTNAME[SIZE_HOSTNAME], ttysn[9];
+//struct hostent *ht;
+//struct in_addr sAddr;
+  int fd_aux;
+  struct ifreq ifr;
+  struct sockaddr_in * sin;
+  struct sid_data sdata; /* GSP AAA [EL] */
+  enum sid_status sstat;   /* GSP AAA [EL] */
+  
+  gsp_auth_pam_get_sid(pamh, &sdata);
+  sstat = gsp_auth_session_sdata_check(&sdata);
 
   user = tty = rhostname = NULL;
-  
-  /* this also obtains service name for authorization
-     this should be normally performed by pam_get_item(PAM_SERVICE)
-     but since PAM service names are incompatible TACACS+
-     we have to pass it via command line argument until a better
-     solution is found ;) */
-  ctrl = _pam_parse (argc, argv);
 
-  if (ctrl & PAM_TAC_DEBUG) {
+    ctrl = _pam_parse (0,0, argc, argv);
+
+    if (ctrl & PAM_TAC_DEBUG) {
     struct in_addr addr;
 
     syslog (LOG_DEBUG, "%s: called (pam_tacplus v%hu.%hu.%hu)"
@@ -235,21 +345,20 @@
 
     bcopy(&active_server, &addr.s_addr, sizeof(addr.s_addr)); 
     syslog (LOG_DEBUG, "%s: active server is [%s]", __FUNCTION__,
-		    inet_ntoa(addr));
+		    xinet_ntoa(addr.s_addr));
   }
   
-  retval = pam_get_item(pamh, PAM_USER, (const void **) &user);
+  retval = pam_get_item(pamh, PAM_USER, (const void **)(void *)&user);    // [GY] 2005/Sep/19  clean warning
   if (retval != PAM_SUCCESS || user == NULL || *user == '\0') {
       _pam_log (LOG_ERR, "unable to obtain username");
       return PAM_USER_UNKNOWN;
-    }
+  }
 
   if (ctrl & PAM_TAC_DEBUG) {
 	  syslog(LOG_DEBUG, "%s: username obtained [%s]", __FUNCTION__, user);
   }
   
   tty = _pam_get_terminal(pamh);
-
   if(!strncmp(tty, "/dev/", 5)) 
 	  tty += 5;
 
@@ -306,7 +415,7 @@
   if(rhost) {
 	  struct in_addr addr;
 	  bcopy(&rhost, &addr.s_addr, sizeof(addr.s_addr));
-	  tac_add_attrib(&attr, "ip", inet_ntoa(addr));
+	  tac_add_attrib(&attr, "ip", xinet_ntoa(addr.s_addr));
   }
   
   tac_fd = tac_connect_single(active_server);
@@ -335,7 +444,7 @@
 
   if(arep.status != AUTHOR_STATUS_PASS_ADD &&
 		  arep.status != AUTHOR_STATUS_PASS_REPL) {
-	  _pam_log (LOG_ERR, "TACACS+ authorisation failed for [%s]", user);
+	  _pam_log (LOG_ERR, "TACACS+ authorization failed for [%s]", user);
 	  status = PAM_PERM_DENIED;
 	  goto ErrExit;
   }
@@ -344,37 +453,117 @@
 	  syslog(LOG_DEBUG, "%s: user [%s] successfully authorized", 
 			  __FUNCTION__, user);
   }
-  
+
   status = PAM_SUCCESS;
-  
-  /* set PAM_RHOST if 'addr' attribute was returned from server */
+
+  /* set PAM_RHOST if 'addr' or 'raccess' attribute was returned from server */
   attr = arep.attr;
   while (attr != NULL)  {
-		  if(!strncmp(attr->attr, "addr", 4)) {
-			char buff[128];
-			char *sep;
-			
+	  //[RK]May/19/05 - Group Authorization Support
+	  char *aux, *aux1; int len;
+	  if ((aux = strstr(attr->attr,"group_name"))) {
+		  aux+=10;
+		  while (isblank(*aux) && *aux) aux++;
+		  if (*aux == '=') { 
+			  aux++;
+			  if ((aux1=strchr(aux,';'))) {
+				  /* GSP AAA [EL] */
+				  if (sstat == GSP_AUTH_SID_VALID) {
+					  *aux1 = '\0';
+					  gsp_auth_session_set_group_name(&sdata, aux);
+				  }
+			  }
+		  }
+	  }
+	  //ADDR
+	  if(strncmp(attr->attr, "addr", 4) == 0) {
+		  char buff[128];
+		  char *sep;
+		  
 			sep = index(attr->attr, '=');
 			if(sep == NULL)
-					sep = index(attr->attr, '*');
+				sep = index(attr->attr, '*');
 			if(sep == NULL) {
-					syslog(LOG_WARNING, "%s: invalid attribute `%s', no separator", __FUNCTION__, attr->attr);
-					break;
+				syslog(LOG_WARNING, "%s: invalid attribute `%s', no separator", __FUNCTION__, attr->attr);
+				break;
 			}
 			
 			bcopy(++sep, buff, attr->attr_len-5);
 			buff[attr->attr_len-5] = '\0';
 			
 			if(isdigit(*buff)) 
-					retval = pam_set_item(pamh, PAM_RHOST, buff);
-					if (retval != PAM_SUCCESS)
-							syslog(LOG_WARNING, "%s: unable to set remote address for PAM", __FUNCTION__);
-					else if(ctrl & PAM_TAC_DEBUG)
-							syslog(LOG_DEBUG, "%s: set remote addr to `%s'", __FUNCTION__, buff);
+				retval = pam_set_item(pamh, PAM_RHOST, buff);
+			if (retval != PAM_SUCCESS)
+				syslog(LOG_WARNING, "%s: unable to set remote address for PAM", __FUNCTION__);
+			else if(ctrl & PAM_TAC_DEBUG)
+				syslog(LOG_DEBUG, "%s: set remote addr to `%s'", __FUNCTION__, buff);
 				  
 		  	break;
+	  }
+	  
+	  //RACCESS [LT]
+	  if(strncmp(attr->attr, "port", 4) == 0) {
+		  char host_ip[SIZE_HOSTNAME];
+		  int tty_num = -1;
+		  
+		  host_ip[0] = '\0';
+		  if(ctrl & PAM_TAC_DEBUG) {
+			  syslog(LOG_DEBUG, "%s: raccess-port[%s]",
+				 __FUNCTION__, attr->attr);
 		  }
-		  attr = attr->next;
+		  if ((ptr=strchr(attr->attr, '=')) != NULL) {
+			  ptr++;
+			  if ((ptr2=strstr(ptr,"/")) != NULL) {
+				  strncpy(host_ip,ptr,(ptr2-ptr));
+				  host_ip[(ptr2-ptr)] = '\0';  
+				  //[RK]Sep/04/06 - accept : ttyNN or ttySnn or any
+				  ptr2++; // skip '/'
+				  if (!strncmp(ptr2,"tty",3)) {
+					  ptr2 += 3;
+					  if (*ptr2 == 'S') ptr2++;
+					  strcpy(ttysn,ptr2);
+					  tty_num=(int)atoi(ttysn);
+				  } else {
+					  if (!strncmp(ptr2,"any",3)) {
+						  tty_num = 0; // all ports
+					  }
+				  }
+                               	} else {
+				  host_ip[0]='\0';
+			  }
+		  } else {
+			  host_ip[0]='\0';
+		  }
+
+		  if (ctrl & PAM_TAC_DEBUG) {
+			  syslog(LOG_DEBUG, "%s: host_ip[%s] tty_num[%d]", __FUNCTION__, host_ip, tty_num);
+		  }
+		  
+		  /* Add ACL for specified permission */
+		  if ((tty_num != -1) &&
+		      libcyc_iface_check_local_hn(host_ip)) {
+			  if (sstat == GSP_AUTH_SID_VALID) {
+				  tacplus_acl_add(&sdata, tty_num);
+			  }
+		  }
+		  
+	  }
+	  
+	  /* TACACS+ Level */
+	  if (strncmp(attr->attr, "level", 5) == 0) {
+		  int level = -1;
+
+		  if ((ptr = strchr(attr->attr, '=')) != NULL) {
+			  ptr++;
+			  level = atoi(ptr);
+
+			  if ((level > 0) && (sstat == GSP_AUTH_SID_VALID)) {
+				  gsp_auth_session_add_group_name(&sdata, gsp_acl_tacplus_get_gn_for_level(level));
+			  }
+		  }
+	  }
+		  
+	  attr = attr->next;
   }
 
   /* free returned attributes */
@@ -396,7 +585,7 @@
  * it may be also directed to all specified servers
  */  
 PAM_EXTERN 
-pam_sm_open_session (pam_handle_t * pamh, int flags,
+int pam_sm_open_session (pam_handle_t * pamh, int flags,
 		     int argc, const char **argv)
 {
 		task_id=(short int) magic();
@@ -408,14 +597,14 @@
  * were problems connection to the server
  */
 PAM_EXTERN 
-pam_sm_close_session (pam_handle_t * pamh, int flags,
+int pam_sm_close_session (pam_handle_t * pamh, int flags,
 		      int argc, const char **argv) {
 		return(_pam_account(pamh, argc, argv,TAC_PLUS_ACCT_FLAG_STOP)); 
 
 }	/* pam_sm_close_session */
 
 PAM_EXTERN
-_pam_account(pam_handle_t *pamh, int argc, const char **argv,  int type)
+int _pam_account(pam_handle_t *pamh, int argc, const char **argv,  int type)
 {
   int retval;
   static int ctrl;
@@ -432,7 +621,7 @@
   
   /* when we are sending STOP packet we no longer have uid 0 */
 /*  if(type == TAC_PLUS_ACCT_FLAG_START) */
-  	ctrl = _pam_parse (argc, argv);
+  ctrl = _pam_parse (0,0, argc, argv);
 
   if (ctrl & PAM_TAC_DEBUG)
     syslog (LOG_DEBUG, "%s: [%s] called (pam_tacplus v%hu.%hu.%hu)"
@@ -440,7 +629,7 @@
   if (ctrl & PAM_TAC_DEBUG)
 	  syslog(LOG_DEBUG, "%s: tac_srv_no=%d", __FUNCTION__, tac_srv_no);
   
-  retval = pam_get_item(pamh, PAM_USER, (const void **) &user);
+  retval = pam_get_item(pamh, PAM_USER, (const void **)(void *)&user);    // [GY] 2005/Sep/19  clean warning
   if(retval != PAM_SUCCESS || user == NULL || *user == '\0') {
 	  _pam_log(LOG_ERR, "%s: unable to obtain username", __FUNCTION__);
 	  return PAM_SESSION_ERR;
@@ -619,7 +808,9 @@
 pam_sm_chauthtok (pam_handle_t * pamh, int flags,
 		  int argc, const char **argv)
 {
-  int ctrl = _pam_parse (argc, argv);
+  int ctrl;
+
+  ctrl = _pam_parse (0,0, argc, argv);
 
   if (ctrl & PAM_TAC_DEBUG)
     syslog (LOG_DEBUG, "%s: called (pam_tacplus v%hu.%hu.%hu)"
Index: pam_tacplus/pam_tacplus.h
===================================================================
--- pam_tacplus.orig/pam_tacplus.h	2000-02-02 11:26:13.000000000 -0800
+++ pam_tacplus/pam_tacplus.h	2007-10-16 16:32:58.000000000 -0700
@@ -2,7 +2,8 @@
 #define PAM_TAC_DEBUG		01
 #define PAM_TAC_ENCRYPT		02
 #define PAM_TAC_FIRSTHIT	04
-#define PAM_TAC_ACCT		10 /* account on all specified servers */
+#define PAM_TAC_ACCT		010 /* account on all specified servers */
+#define PAM_USE_FIRST_PASS	020
 
 /* how many TACPLUS+ servers can be defined */
 #define TAC_MAX_SERVERS		4
@@ -11,3 +12,8 @@
 #define PAM_TAC_VMAJ		1
 #define PAM_TAC_VMIN		2
 #define PAM_TAC_VPAT		9
+
+/* default configuration file */
+#define DEF_CONF_FILE	"/etc/tacplus.conf"
+
+#define BUFFER_SIZE		1024
Index: pam_tacplus/support.c
===================================================================
--- pam_tacplus.orig/support.c	2000-02-02 11:28:24.000000000 -0800
+++ pam_tacplus/support.c	2007-10-16 16:40:54.000000000 -0700
@@ -12,6 +12,7 @@
 #include <arpa/inet.h>
 #include <string.h>
 #include <unistd.h>
+#include <stdio.h>
 
 #define PAM_SM_AUTH
 #define PAM_SM_ACCOUNT
@@ -28,11 +29,24 @@
 int tac_srv_no = 0;
 char *tac_service = NULL;
 char *tac_protocol = NULL;
+int tac_timeout=30, tac_retries=3;
 
 /* libtac */
 extern char *tac_secret;
 extern int tac_encryption;
 
+char *xinet_ntoa(unsigned long server)
+{
+	static char ip[32];
+
+	snprintf(ip, sizeof(ip),  "%d.%d.%d.%d",
+	(char)	((server >> 24) & 0xff),
+	(char)	((server >> 16) & 0xff),
+	(char)	((server >>  8) & 0xff),
+	(char)	(server  & 0xff));    //[GY] 2005/aug/29  clean warnings
+	return(ip);
+}
+
 #ifndef xcalloc
 void *_xcalloc (size_t size)
 {
@@ -52,7 +66,7 @@
 		int retval;
 		char *tty;
 
-  		retval = pam_get_item (pamh, PAM_TTY, (const void **) &tty);
+  		retval = pam_get_item (pamh, PAM_TTY, (const void **)(void *) &tty); //[GY] 2005/Sep/19  clean warning
   		if (retval != PAM_SUCCESS || tty == NULL || *tty == '\0') {
 		  tty = ttyname(STDIN_FILENO);
 		  if(tty == NULL || *tty == '\0') {
@@ -82,7 +96,7 @@
   int retval;
   struct pam_conv *conv;
 
-  if ((retval = pam_get_item (pamh, PAM_CONV, (const void **) &conv))
+  if ((retval = pam_get_item (pamh, PAM_CONV, (const void **)(void *) &conv)) //[GY] 2005/Sep/19  clean warning
       == PAM_SUCCESS)
     {
       retval = conv->conv (nargs, (const struct pam_message **) message
@@ -105,7 +119,7 @@
 int tacacs_get_password (pam_handle_t * pamh, int flags
 		     ,int ctrl, char **password)
 {
-  char *pass;
+  char *pass=NULL;   //[GY] 2005/Aug/31  clean warnings
 
   struct pam_message msg[1], *pmsg[1];
   struct pam_response *resp;
@@ -179,46 +193,48 @@
   return (-1);
 }
 
-int _pam_parse (int argc, const char **argv)
+int _pam_parse_argv(int ctrl, char *argv)
 {
 
-  int ctrl = 0;
-
-  /* otherwise the list will grow with each call */
-  tac_srv_no = 0;
-
-  for (ctrl = 0; argc-- > 0; ++argv)
-    {
-
-      if (!strcmp (*argv, "debug")) /* all */
-	ctrl |= PAM_TAC_DEBUG;
-      else if (!strcmp (*argv, "encrypt"))
+    if (!strcmp (argv, "debug")) /* all */
+	  ctrl |= PAM_TAC_DEBUG;
+    else if (!strcmp(argv, "use_first_pass"))
+      ctrl |= PAM_USE_FIRST_PASS;
+    else if (!strcmp (argv, "encrypt"))
 	{
 	  ctrl |= PAM_TAC_ENCRYPT;
 	  tac_encryption = 1;
 	}
-      else if (!strcmp (*argv, "first_hit")) /* authentication */
+	  else if (!strncmp (argv, "timeout=",8)) /* timeout for authentication */
+	  {
+		tac_timeout=atoi(argv+8);
+	  }
+	  else if (!strncmp (argv, "retries=",8)) /* timeout for authentication */
+	  {
+		tac_retries=atoi(argv+8);
+	  }
+      else if (!strcmp (argv, "first_hit")) /* authentication */
 	ctrl |= PAM_TAC_FIRSTHIT;
-      else if (!strncmp (*argv, "service=", 8)) /* author & acct */
+      else if (!strncmp (argv, "service=", 8)) /* author & acct */
 	{
-	  tac_service = (char *) _xcalloc (strlen (*argv + 8) + 1);
-	  strcpy (tac_service, *argv + 8);
+	  tac_service = (char *) _xcalloc (strlen (argv + 8) + 1);
+	  strcpy (tac_service, argv + 8);
 	}
-      else if (!strncmp (*argv, "protocol=", 9)) /* author & acct */
+      else if (!strncmp (argv, "protocol=", 9)) /* author & acct */
 	{
-	  tac_protocol = (char *) _xcalloc (strlen (*argv + 9) + 1);
-	  strcpy (tac_protocol, *argv + 9);
+	  tac_protocol = (char *) _xcalloc (strlen (argv + 9) + 1);
+	  strcpy (tac_protocol, argv + 9);
 	}
-      else if (!strcmp (*argv, "acct_all")) {
+      else if (!strcmp (argv, "acct_all")) {
 	      ctrl |= PAM_TAC_ACCT;
       } 
-      else if (!strncmp (*argv, "server=", 7)) /* authen & acct */
+      else if (!strncmp (argv, "server=", 7)) /* authen & acct */
 	{
 	  unsigned long addr = 0;
 	  
 	  if(tac_srv_no < TAC_MAX_SERVERS) { 
 		  
-	  	  addr = _resolve_name (*argv + 7);
+	  	  addr = _resolve_name (argv + 7);
 	  	  if (addr != -1)
 	    	  {
 	      	  	tac_srv[tac_srv_no] = addr;
@@ -226,20 +242,94 @@
 	    	  } else
 	    		_pam_log (LOG_ERR,
 		      		"skip invalid server: %s (h_errno %d)",
-		      		*argv + 7, h_errno);
+		      		argv + 7, h_errno);
 	  } else 
 		  _pam_log(LOG_ERR, "maximum number of servers (%d) exceeded, skipping",
 				  TAC_MAX_SERVERS);
 	}
-      else if (!strncmp (*argv, "secret=", 7))
+      else if (!strncmp (argv, "secret=", 7))
 	{
-	  tac_secret = (char *) _xcalloc (strlen (*argv + 7) + 1);
-	  strcpy (tac_secret, *argv + 7);
+	  tac_secret = (char *) _xcalloc (strlen (argv + 7) + 1);
+	  strcpy (tac_secret, argv + 7);
 	}
       else
-	_pam_log (LOG_WARNING, "unrecognized option: %s", *argv);
+	_pam_log (LOG_WARNING, "unrecognized option: %s", argv);
 
-    }
+	return (ctrl);
+
+}
+
+//[RK]Jun/02/05 - Group Authorization Support - removed the get_str
+int _pam_parse ( int acct, int port, int argc, const char **argv)
+{
+//int ix = 0;                 [GY] 2005/aug/25  clean warnings
+  int ctrl = 0;
+//char *p, *ptr, *line;       [GY] 2005/aug/25  clean warnings
+  char *ptr, *line;
+  char buf[BUFFER_SIZE], tmpstr[100];
+  FILE *fp = NULL;
+//unsigned long addr = 0;     [GY] 2005/aug/25  clean warnings
+  int linenum = 0, do_encrypt = 0;
+
+  /* otherwise the list will grow with each call */
+  tac_srv_no = 0;
+
+	// read from default configuration file
+	if ((fp = fopen(DEF_CONF_FILE, "r")) != NULL) {
+		while (!feof(fp) &&
+			(fgets (buf, sizeof(buf), fp) != NULL) &&
+			!ferror(fp)) {
+			line = ptr = buf;
+			if ((*ptr == '#') || !ptr ||
+				(*ptr == '\n')) {
+      			continue;
+			}
+			while (*ptr && (*ptr != '\n'))
+				ptr++;
+			if (*ptr == '\n') *ptr = 0;
+
+			linenum++;
+
+			if (!strncmp(line, "authhost1=", 10) ||
+				!strncmp(line, "authhost2=", 10) ||
+				!strncmp(line, "accthost1=", 10) ||
+				!strncmp(line, "accthost2=", 10)) {
+					memset(tmpstr, 0, sizeof(tmpstr));
+					sprintf(tmpstr, "server=%s", line+10);
+					ctrl = _pam_parse_argv(ctrl, tmpstr);
+			} else if (!strncmp(line, "secret=", 7)) {
+					ctrl = _pam_parse_argv(ctrl, line);
+			} else if (!strncmp(line, "encrypt=", 8)) {
+				if (sscanf(line, "encrypt=%d", &do_encrypt) == 1) {
+					if (do_encrypt) {
+						ctrl = _pam_parse_argv(ctrl, "encrypt");
+					}
+				} else {
+					_pam_log(LOG_ERR, "invalid line%d in reading %s",
+					linenum, DEF_CONF_FILE);
+				}
+			} else if (!strncmp(line, "service=", 8)) {
+					ctrl = _pam_parse_argv(ctrl, line);
+			} else if (!strncmp(line,  "protocol=", 9)) {
+					ctrl = _pam_parse_argv(ctrl, line);
+			} else if (!strncmp(line,  "timeout=", 8)) {
+					ctrl = _pam_parse_argv(ctrl, line);
+			} else if (!strncmp(line,  "retries=", 8)) {
+					ctrl = _pam_parse_argv(ctrl, line);
+			} else {
+				_pam_log(LOG_ERR, "invalid line%d in reading %s",
+					linenum, DEF_CONF_FILE);
+			}
+		}
+	}
+
+  if (fp) {
+	fclose(fp);
+  }
+
+  for ( ; argc-- > 0; ++argv) {
+    ctrl = _pam_parse_argv(ctrl, (char *)*argv);  //[GY] 2005/Sep/19  clean warning
+  }
 
   return ctrl;
 
Index: pam_tacplus/support.h
===================================================================
--- pam_tacplus.orig/support.h	1999-02-05 08:32:55.000000000 -0800
+++ pam_tacplus/support.h	2007-10-16 16:32:58.000000000 -0700
@@ -1,7 +1,8 @@
 #include <security/pam_modules.h>
 
 /* support.c */
-extern int _pam_parse (int argc, const char **argv);
+//[RK]Jun/02/05 - Group Authorization Support - removed the get_str
+extern int _pam_parse (int acct, int port, int argc, const char **argv);
 extern unsigned long _resolve_name (char *serv);
 extern int tacacs_get_password (pam_handle_t * pamh, int flags
 		     ,int ctrl, char **password);
@@ -11,3 +12,4 @@
 extern void _pam_log (int err, const char *format,...);
 extern void *_xcalloc (size_t size);
 extern char *_pam_get_terminal(pam_handle_t *pamh);
+extern char *xinet_ntoa(unsigned long server);
