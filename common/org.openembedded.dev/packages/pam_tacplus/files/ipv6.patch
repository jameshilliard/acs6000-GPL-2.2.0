Index: pam_tacplus/pam_tacplus.c
===================================================================
--- pam_tacplus.orig/pam_tacplus.c	2008-03-18 16:57:20.000000000 -0700
+++ pam_tacplus/pam_tacplus.c	2008-03-18 16:57:22.000000000 -0700
@@ -11,7 +11,6 @@
 #include <netdb.h>      //for NETDB res functions
 #include <sys/types.h>  //for gethostbyname
 
-
 #include <stdlib.h>		/* malloc */
 #include <syslog.h>
 #include <netdb.h>		/* gethostbyname */
@@ -19,6 +18,8 @@
 #include <sys/ioctl.h>   //[GY]2006/Jan/24  Group_Auth_Box
 #include <net/if.h>      //[GY]2006/Jan/24  Group_Auth_Box
 
+#include <ifaddrs.h>
+
 #include <netinet/in.h>
 #include <arpa/inet.h>
 #include <stdarg.h>		/* va_ */
@@ -55,7 +56,7 @@
 int _pam_send_account(int tac_fd, int type, char *user, char *tty);
 
 /* support.c */
-extern u_long tac_srv[TAC_MAX_SERVERS];
+extern struct sockaddr_storage tac_srv[TAC_MAX_SERVERS];
 extern int tac_srv_no;
 extern char *tac_service;
 extern char *tac_protocol;
@@ -73,10 +74,12 @@
 extern int tac_encryption;
 
 /* address of server discovered by pam_sm_authenticate */
-static u_long active_server = 0;
+static struct sockaddr_storage active_server = { 0 };
 /* accounting task identifier */
 static short int task_id = 0;
 
+static const int SIZE_HOSTNAME = 256;
+
 /* authenticates user on remote TACACS+ server
  * returns PAM_SUCCESS if the supplied username and password
  * pair is valid 
@@ -179,9 +182,11 @@
   for (srv_i = 0; srv_i < tac_srv_no; srv_i++)
     {
       char *msg = NULL;
-  	  if (ctrl & PAM_TAC_DEBUG)
-			  syslog (LOG_DEBUG, "%s: trying srv %d",
-							  __FUNCTION__, srv_i );
+      if (ctrl & PAM_TAC_DEBUG) {
+	char str[INET6_ADDRSTRLEN] = "";
+	syslog (LOG_DEBUG, "%s: trying srv %d ip %s",
+		  __FUNCTION__, srv_i, xinet_ntoa((struct sockaddr *)&tac_srv[srv_i],str,sizeof(str)));
+      }
       tac_fd = tac_connect_single(tac_srv[srv_i]);
       if (tac_fd < 0)
 	{
@@ -318,15 +323,10 @@
   struct tac_attrib *attr = NULL;
   int tac_fd;
   char *rhostname;
-  u_long rhost = 0;
-  int tty_num=0, SIZE_HOSTNAME=256;
-  char *ptr,*ptr2, host_ip[SIZE_HOSTNAME], *IPADDRESS = NULL;  //[GY]2006/Jan/24  Group_Auth_Box
+  struct sockaddr_storage rhost = { 0 };
+  int tty_num=-1;
+  char *ptr,*ptr2;
   char  HOSTNAME[SIZE_HOSTNAME], ttysn[9];
-//struct hostent *ht;
-//struct in_addr sAddr;
-  int fd_aux;
-  struct ifreq ifr;
-  struct sockaddr_in * sin;
   struct sid_data sdata; /* GSP AAA [EL] */
   enum sid_status sstat;   /* GSP AAA [EL] */
   
@@ -335,20 +335,21 @@
 
   user = tty = rhostname = NULL;
 
-    ctrl = _pam_parse (0,0, argc, argv);
+  ctrl = _pam_parse (0,0, argc, argv);
 
-    if (ctrl & PAM_TAC_DEBUG) {
-    struct in_addr addr;
+  if (ctrl & PAM_TAC_DEBUG) {
+    struct sockaddr_storage addr;
+    char str[INET6_ADDRSTRLEN] = "";
 
     syslog (LOG_DEBUG, "%s: called (pam_tacplus v%hu.%hu.%hu)"
 	, __FUNCTION__, PAM_TAC_VMAJ, PAM_TAC_VMIN, PAM_TAC_VPAT);
 
-    bcopy(&active_server, &addr.s_addr, sizeof(addr.s_addr)); 
+    bcopy(&active_server, &addr, sizeof(addr)); 
     syslog (LOG_DEBUG, "%s: active server is [%s]", __FUNCTION__,
-		    xinet_ntoa(addr.s_addr));
+		    xinet_ntoa((struct sockaddr *)&addr,str,sizeof(str)));
   }
   
-  retval = pam_get_item(pamh, PAM_USER, (const void **)(void *)&user);    // [GY] 2005/Sep/19  clean warning
+  retval = pam_get_item(pamh, PAM_USER, (const void **)(void *)&user); 
   if (retval != PAM_SUCCESS || user == NULL || *user == '\0') {
       _pam_log (LOG_ERR, "unable to obtain username");
       return PAM_USER_UNKNOWN;
@@ -393,7 +394,7 @@
      by TACACS+; we cannot solely authorize user if it hasn't
      been authenticated or has been authenticated by method other
      than TACACS+ */
-  if(!active_server) {
+  if(!active_server.ss_family) {
 	  _pam_log (LOG_ERR, "user not authenticated by TACACS+");
 	  return PAM_AUTH_ERR;
   }
@@ -412,10 +413,9 @@
   tac_add_attrib(&attr, "service", tac_service);
   tac_add_attrib(&attr, "protocol", tac_protocol);
 
-  if(rhost) {
-	  struct in_addr addr;
-	  bcopy(&rhost, &addr.s_addr, sizeof(addr.s_addr));
-	  tac_add_attrib(&attr, "ip", xinet_ntoa(addr.s_addr));
+  if(rhost.ss_family) {
+	  char str[INET6_ADDRSTRLEN] = "";
+          tac_add_attrib(&attr, "ip", xinet_ntoa((struct sockaddr *)&rhost,str,sizeof(str)));
   }
   
   tac_fd = tac_connect_single(active_server);
@@ -504,8 +504,6 @@
 	  //RACCESS [LT]
 	  if(strncmp(attr->attr, "port", 4) == 0) {
 		  char host_ip[SIZE_HOSTNAME];
-		  int tty_num = -1;
-		  
 		  host_ip[0] = '\0';
 		  if(ctrl & PAM_TAC_DEBUG) {
 			  syslog(LOG_DEBUG, "%s: raccess-port[%s]",
@@ -715,9 +713,12 @@
 						  continue;
 				  }
 
-  		  		  if (ctrl & PAM_TAC_DEBUG)
-				  	syslog(LOG_DEBUG, "%s: connected with fd=%d (srv %d)", __FUNCTION__, tac_fd, srv_i);
-
+  		  		  if (ctrl & PAM_TAC_DEBUG) {
+				  	char str[INET6_ADDRSTRLEN] = "";
+					syslog(LOG_DEBUG, "%s: connected with fd=%d (srv %d ip %s)",
+						__FUNCTION__, tac_fd, srv_i,
+						xinet_ntoa((struct sockaddr *)&tac_srv[srv_i],str,sizeof(str)));
+				  }
 
 				  retval = _pam_send_account(tac_fd, type,
 								  user, tty);
Index: pam_tacplus/support.c
===================================================================
--- pam_tacplus.orig/support.c	2008-03-18 16:57:20.000000000 -0700
+++ pam_tacplus/support.c	2008-03-18 16:57:22.000000000 -0700
@@ -25,7 +25,7 @@
 #include "tacplus.h"
 #include "libtac.h"
 
-unsigned long tac_srv[TAC_MAX_SERVERS];
+struct sockaddr_storage tac_srv[TAC_MAX_SERVERS];
 int tac_srv_no = 0;
 char *tac_service = NULL;
 char *tac_protocol = NULL;
@@ -35,16 +35,27 @@
 extern char *tac_secret;
 extern int tac_encryption;
 
-char *xinet_ntoa(unsigned long server)
-{
-	static char ip[32];
-
-	snprintf(ip, sizeof(ip),  "%d.%d.%d.%d",
-	(char)	((server >> 24) & 0xff),
-	(char)	((server >> 16) & 0xff),
-	(char)	((server >>  8) & 0xff),
-	(char)	(server  & 0xff));    //[GY] 2005/aug/29  clean warnings
-	return(ip);
+/**
+ * Returns NULL if there was no error or an error message.
+ */
+const char *xinet_aton(const char *buffer, struct sockaddr_storage *server) {
+	
+	struct addrinfo *res = NULL;
+	struct addrinfo hints;
+	int n;
+	memset(&hints,0,sizeof(hints));
+	hints.ai_family = PF_UNSPEC;
+	hints.ai_flags = AI_NUMERICHOST;
+	n = getaddrinfo(buffer,NULL,&hints,&res);
+	
+	if (n == 0) {
+		memcpy(server,res->ai_addr,res->ai_addrlen);
+		freeaddrinfo(res);
+		return NULL;
+	} else {
+		const char *msg = gai_strerror(n);
+		return msg;
+	}
 }
 
 #ifndef xcalloc
@@ -87,6 +98,34 @@
   closelog ();
 }
 
+/**
+ * The buffer parameter needs to have at least INET6_ADDRSTRLEN bytes.
+ */
+char *xinet_ntoa(struct sockaddr *server, char *buffer, int b_len) {
+	
+	struct sockaddr_storage addr;
+	int addr_len = sizeof(addr);
+	int n;
+	
+	if (server->sa_family == AF_INET) {
+		addr_len = sizeof(struct sockaddr_in);
+		memcpy(&addr,server,addr_len);
+		server = (struct sockaddr *)&addr;
+	} else if (server->sa_family == AF_INET6) {
+		addr_len = sizeof(struct sockaddr_in6);
+		memcpy(&addr,server,addr_len);
+		server = (struct sockaddr *)&addr;
+	}
+	
+	n = getnameinfo(server,addr_len,
+			buffer,b_len,NULL,0,NI_NUMERICHOST);
+	
+	if (n != 0) {
+		_pam_log(LOG_ERR, "error in %s getnameinfo - %d", __FUNCTION__, n);
+	}
+	
+	return buffer;
+}
 
 /* stolen from pam_stress */
 int converse (pam_handle_t * pamh, int nargs
@@ -170,32 +209,27 @@
   return PAM_SUCCESS;
 }
 
-unsigned long _resolve_name (char *serv)
-{
-  struct in_addr addr;
-  struct hostent *h;
+const char * _resolve_name (char *serv, struct sockaddr_storage *addr) {
 
-  if (inet_aton (serv, &addr) == 0)
-    {
-      if ((h = gethostbyname (serv)) == NULL)
-	{
-	  herror ("gethostbyname");
-	}
-      else
-	{
-	  bcopy (h->h_addr, (char *) &addr, sizeof (struct in_addr));
-	  return (addr.s_addr);
+	struct addrinfo *res;
+	
+	int n = getaddrinfo(serv, NULL, NULL, &res);
+
+	if (n != 0) {
+		const char *msg = gai_strerror(n);
+		if (PAM_TAC_DEBUG) {
+			_pam_log (LOG_ERR, "pam_sm_authenticate: no error reported %s",msg);
+		}
+		return msg;
+	} else {
+		memcpy(addr,res->ai_addr,res->ai_addrlen);
+		freeaddrinfo(res);
+		return NULL;
 	}
-    }
-  else
-    return (addr.s_addr);
-
-  return (-1);
 }
 
 int _pam_parse_argv(int ctrl, char *argv)
 {
-
     if (!strcmp (argv, "debug")) /* all */
 	  ctrl |= PAM_TAC_DEBUG;
     else if (!strcmp(argv, "use_first_pass"))
@@ -230,22 +264,22 @@
       } 
       else if (!strncmp (argv, "server=", 7)) /* authen & acct */
 	{
-	  unsigned long addr = 0;
+      struct sockaddr_storage addr;
 	  
-	  if(tac_srv_no < TAC_MAX_SERVERS) { 
-		  
-	  	  addr = _resolve_name (argv + 7);
-	  	  if (addr != -1)
-	    	  {
+	  if (tac_srv_no < TAC_MAX_SERVERS) {		  
+	  	  const char *error_msg = _resolve_name (argv + 7, &addr);
+	  	  if (error_msg == NULL) {
 	      	  	tac_srv[tac_srv_no] = addr;
 	      		tac_srv_no++;
-	    	  } else
+	    	  } else {
 	    		_pam_log (LOG_ERR,
-		      		"skip invalid server: %s (h_errno %d)",
-		      		argv + 7, h_errno);
-	  } else 
+		      		"skip invalid server: %s (%s)",
+		      		argv + 7, error_msg);
+	    	  }
+	  } else {
 		  _pam_log(LOG_ERR, "maximum number of servers (%d) exceeded, skipping",
 				  TAC_MAX_SERVERS);
+	  }
 	}
       else if (!strncmp (argv, "secret=", 7))
 	{
@@ -256,7 +290,6 @@
 	_pam_log (LOG_WARNING, "unrecognized option: %s", argv);
 
 	return (ctrl);
-
 }
 
 //[RK]Jun/02/05 - Group Authorization Support - removed the get_str
Index: pam_tacplus/support.h
===================================================================
--- pam_tacplus.orig/support.h	2008-03-18 16:57:20.000000000 -0700
+++ pam_tacplus/support.h	2008-03-18 16:57:22.000000000 -0700
@@ -3,7 +3,7 @@
 /* support.c */
 //[RK]Jun/02/05 - Group Authorization Support - removed the get_str
 extern int _pam_parse (int acct, int port, int argc, const char **argv);
-extern unsigned long _resolve_name (char *serv);
+extern const char * _resolve_name (char *serv, struct sockaddr_storage *addr);
 extern int tacacs_get_password (pam_handle_t * pamh, int flags
 		     ,int ctrl, char **password);
 extern int converse (pam_handle_t * pamh, int nargs
@@ -12,4 +12,6 @@
 extern void _pam_log (int err, const char *format,...);
 extern void *_xcalloc (size_t size);
 extern char *_pam_get_terminal(pam_handle_t *pamh);
-extern char *xinet_ntoa(unsigned long server);
+
+extern char *xinet_ntoa(struct sockaddr *server, char *buffer, int b_len);
+extern const char *xinet_aton(const char *buffer, struct sockaddr_storage *server);
Index: pam_tacplus/libtac/lib/connect.c
===================================================================
--- pam_tacplus.orig/libtac/lib/connect.c	2008-03-18 16:57:20.000000000 -0700
+++ pam_tacplus/libtac/lib/connect.c	2008-03-18 16:57:22.000000000 -0700
@@ -69,63 +69,77 @@
    to the first available server from list passed
    in server table.
 */
-int tac_connect(u_long *server, int servers) {
-	struct sockaddr_in serv_addr;
+int tac_connect(struct sockaddr_storage *server, int servers) {
+	struct sockaddr_storage serv_addr;
+	struct sockaddr_in *serv_addr4 = (struct sockaddr_in *)&serv_addr;
+	struct sockaddr_in6 *serv_addr6 = (struct sockaddr_in6 *)&serv_addr;
+	
+	int serv_addr_len = sizeof(struct sockaddr_storage);
 	struct servent *s;
 	int fd;
 	int tries = 0,nro_tries=0; //nro_tries = # tries to connect
-							   //tries = # server begin connect
-
-	if(!servers) {
+	//tries = # server begin connect
+	if (!servers) {
 		syslog(LOG_ERR, "%s: no TACACS+ servers defined", __FUNCTION__);
 		return(-1);
 	}
 
 	setSignals();
-	while(tries < servers) {	
+	while (tries < servers) {
+
+		int port = htons(TAC_PLUS_PORT);
+		s = getservbyname("tacacs", "tcp");
+		if (s != NULL) { 
+			port = s->s_port;
+		}
 
- 		bzero( (char *) &serv_addr, sizeof(serv_addr));
-		serv_addr.sin_family = AF_INET;
-		serv_addr.sin_addr.s_addr = server[tries];
-		s=getservbyname("tacacs", "tcp");
-		if(s == NULL) 
-			serv_addr.sin_port = htons(TAC_PLUS_PORT);
-		else
-			serv_addr.sin_port = s->s_port;
-
-		if((fd=socket(AF_INET, SOCK_STREAM, 0)) < 0) {
-       	   		syslog(LOG_WARNING, 
-				"%s: socket creation error for %s: %m", __FUNCTION__, \
-							xinet_ntoa(server[tries]));
+		bzero((char *) &serv_addr, sizeof(serv_addr));
+		if (server[tries].ss_family == AF_INET) {
+			serv_addr_len = sizeof(struct sockaddr_in);
+			memcpy(&serv_addr,&server[tries],serv_addr_len);
+			serv_addr4->sin_port = port;
+		} else if (server[tries].ss_family == AF_INET6) {
+			serv_addr_len = sizeof(struct sockaddr_in6);
+			memcpy(&serv_addr,&server[tries],serv_addr_len);
+			serv_addr6->sin6_port = port;
+		}
+
+		if ((fd=socket(server[tries].ss_family, SOCK_STREAM, 0)) < 0) {
+			char str[INET6_ADDRSTRLEN] = "";
+			syslog(LOG_WARNING, 
+					"%s: socket creation error for %s: %m", __FUNCTION__, \
+					xinet_ntoa((struct sockaddr *)&server[tries],str,sizeof(str)));
 			tries++;
 			continue;
 		}
-	 	do {
+		do {
 			alarm(tac_timeout);
 			if(connect(fd, (struct sockaddr *) &serv_addr, 
-							sizeof(serv_addr)) < 0)
-    			{
-    				if(errno==EINTR) {
-						if(got_sig==SIGALRM) {
-     	  					syslog(LOG_WARNING, 
-							"%s: connection to %s failed: Connection timed out", \
-								__FUNCTION__, xinet_ntoa(server[tries]));
-						}
-	    			}
-    				else { 
-     	  			syslog(LOG_WARNING, 
-					"%s: connection to %s failed: %m", __FUNCTION__, \
-							xinet_ntoa(server[tries]));
+					serv_addr_len) < 0)
+			{
+				if(errno==EINTR) {
+					if(got_sig==SIGALRM) {
+						char str[INET6_ADDRSTRLEN] = "";
+						syslog(LOG_WARNING, 
+								"%s: connection to %s failed: Connection timed out", \
+								__FUNCTION__, xinet_ntoa((struct sockaddr *)&server[tries],str,sizeof(str)));
 					}
+				} else { 
+					char str[INET6_ADDRSTRLEN] = "";
+					syslog(LOG_WARNING, 
+							"%s: connection to %s failed: %m", __FUNCTION__, \
+							xinet_ntoa((struct sockaddr *)&server[tries],str,sizeof(str)));
+				}
 				nro_tries++;
-	    		}
+			}
 			else {
-			/* connected ok */
-			alarm(0);
-			TACDEBUG((LOG_DEBUG, "%s: connected to %s", __FUNCTION__, \
-			       	xinet_ntoa(server[tries])));
+				/* connected ok */
+				char str[INET6_ADDRSTRLEN] = "";
+				alarm(0);
+				TACDEBUG((LOG_DEBUG, "%s: connected to %s", __FUNCTION__, \
+						xinet_ntoa((struct sockaddr *)&server[tries],str,sizeof(str))));
 
-			return(fd);
+				return(fd);
 			}
 		} while (nro_tries < tac_retries);
 		tries++;
@@ -140,6 +154,6 @@
 } /* tac_connect */
 
 
-int tac_connect_single(u_long server) {
+int tac_connect_single(struct sockaddr_storage server) {
 	return(tac_connect(&server, 1));
 } /* tac_connect_single */
Index: pam_tacplus/libtac/lib/header.c
===================================================================
--- pam_tacplus.orig/libtac/lib/header.c	2008-03-18 16:57:20.000000000 -0700
+++ pam_tacplus/libtac/lib/header.c	2008-03-18 16:57:22.000000000 -0700
@@ -7,6 +7,7 @@
  * header.c  Create pre-filled header for TACACS+ request.
  */
 
+#include <sys/socket.h>
 #include "tacplus.h"
 #include "libtac.h"
 #include "xalloc.h"
Index: pam_tacplus/libtac/lib/acct_r.c
===================================================================
--- pam_tacplus.orig/libtac/lib/acct_r.c	2000-02-02 11:29:25.000000000 -0800
+++ pam_tacplus/libtac/lib/acct_r.c	2008-03-18 16:57:22.000000000 -0700
@@ -9,6 +9,7 @@
 
 #include <stdlib.h>
 #include <syslog.h>
+#include <sys/socket.h>
 
 #include "tacplus.h"
 #include "libtac.h"
Index: pam_tacplus/libtac/lib/acct_s.c
===================================================================
--- pam_tacplus.orig/libtac/lib/acct_s.c	2000-02-02 11:29:33.000000000 -0800
+++ pam_tacplus/libtac/lib/acct_s.c	2008-03-18 16:57:22.000000000 -0700
@@ -11,6 +11,7 @@
 #include <stdlib.h>
 #include <netinet/in.h>
 #include <syslog.h>
+#include <sys/socket.h>
 
 #include "tacplus.h"
 #include "libtac.h"
Index: pam_tacplus/libtac/lib/attrib.c
===================================================================
--- pam_tacplus.orig/libtac/lib/attrib.c	2000-02-02 11:29:42.000000000 -0800
+++ pam_tacplus/libtac/lib/attrib.c	2008-03-18 16:57:22.000000000 -0700
@@ -11,6 +11,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <syslog.h>
+#include <sys/socket.h>
 
 #include "tacplus.h"
 #include "libtac.h"
Index: pam_tacplus/libtac/lib/authen_r.c
===================================================================
--- pam_tacplus.orig/libtac/lib/authen_r.c	2000-02-02 11:29:52.000000000 -0800
+++ pam_tacplus/libtac/lib/authen_r.c	2008-03-18 16:57:22.000000000 -0700
@@ -10,6 +10,7 @@
 #include <stdlib.h>
 #include <syslog.h>
 #include <string.h>
+#include <sys/socket.h>
 
 #include "tacplus.h"
 #include "libtac.h"
Index: pam_tacplus/libtac/lib/authen_s.c
===================================================================
--- pam_tacplus.orig/libtac/lib/authen_s.c	2000-02-02 11:30:01.000000000 -0800
+++ pam_tacplus/libtac/lib/authen_s.c	2008-03-18 16:57:22.000000000 -0700
@@ -10,6 +10,7 @@
 #include <stdlib.h>
 #include <syslog.h>
 #include <string.h>
+#include <sys/socket.h>
 
 #include "tacplus.h"
 #include "libtac.h"
Index: pam_tacplus/libtac/lib/crypt.c
===================================================================
--- pam_tacplus.orig/libtac/lib/crypt.c	2000-02-02 11:31:25.000000000 -0800
+++ pam_tacplus/libtac/lib/crypt.c	2008-03-18 16:57:22.000000000 -0700
@@ -11,6 +11,7 @@
 #include <stdlib.h>
 #include <string.h>
 #include <syslog.h>
+#include <sys/socket.h>
 
 #include "tacplus.h"
 #include "libtac.h"
Index: pam_tacplus/libtac/lib/hdr_check.c
===================================================================
--- pam_tacplus.orig/libtac/lib/hdr_check.c	2000-02-02 11:31:31.000000000 -0800
+++ pam_tacplus/libtac/lib/hdr_check.c	2008-03-18 16:57:22.000000000 -0700
@@ -9,6 +9,7 @@
 
 #include <syslog.h>
 #include <netinet/in.h>
+#include <sys/socket.h>
 
 #include "tacplus.h"
 #include "messages.h"
Index: pam_tacplus/libtac/include/libtac.h
===================================================================
--- pam_tacplus.orig/libtac/include/libtac.h	2000-02-02 11:28:54.000000000 -0800
+++ pam_tacplus/libtac/include/libtac.h	2008-03-18 17:02:06.000000000 -0700
@@ -25,7 +25,8 @@
 extern int tac_encryption;
 extern char *tac_secret;
 
-extern int tac_connect(u_long *server, int servers);
+extern int tac_connect(struct sockaddr_storage *server, int servers);
+extern int tac_connect_single(struct sockaddr_storage server);
 extern int tac_authen_pap_send(int fd, char *user, char *pass, char *tty);
 extern char *tac_authen_pap_read(int fd);
 extern HDR *_tac_req_header(u_char type);
